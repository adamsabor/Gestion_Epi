
**Instructions pour le Projet GestEPI**

**1. Contexte et Objectif du Projet**  
- La société de travaux en hauteur emploie des cordistes qui interviennent sur divers chantiers (bâtiments, voirie, espaces verts).  
- Pour assurer la sécurité en hauteur, des EPI (Équipements de Protection Individuelle) sont utilisés.  
- Chaque EPI doit être régulièrement contrôlé et suivi par un gestionnaire qui tient un registre (actuellement sur papier ou tableur).  
- Objectif : Développer une application dédiée pour gérer la saisie des EPI et leurs contrôles.

**2. Fonctionnalités à Développer**  
- **Saisie d’EPI**  
  - Enregistrer la marque, le modèle, le numéro de série, ainsi qu’un identifiant unique personnalisé.  
  - Pour certains EPI (ex. cordes, baudriers), enregistrer la taille et la couleur.  
  - Enregistrer les dates : d’achat, de fabrication et de mise en service.  
  - Noter la périodicité de contrôle propre à chaque EPI pour la gestion des alertes.

- **Saisie des Contrôles**  
  - Pour chaque contrôle, enregistrer :  
    - La date du contrôle  
    - Le nom du gestionnaire effectuant le contrôle  
    - L’EPI contrôlé  
    - Le statut après contrôle (Opérationnel, À réparer, Mis au rebut)  
    - Des remarques éventuelles

- **Consultation et Détail**  
  - Permettre la consultation des EPI et de leur historique de contrôles.  
  - Afficher le détail d’un contrôle lorsqu’il est sélectionné.

- **Alertes**  
  - Mettre en place une alerte pour prévenir des contrôles à venir.

**3. Diagramme de Cas d’Utilisation**  
- Créer un diagramme illustrant les interactions entre le gestionnaire (utilisateur) et l’application pour :  
  - La saisie d’un EPI  
  - La saisie d’un contrôle  
  - La consultation des EPI et des historiques  
  - La visualisation du détail d’un contrôle  
  - La gestion des alertes de contrôle

**4. Mise en Place du Front-End**  
- Utiliser le template suivant pour générer le projet Front :  
  ```bash
  npm install -g @romgio/create-react-typescript-mui-app
  npm install -g yarn   # à exécuter si nécessaire
  npx @romgio/create-react-typescript-mui-app GestEPIFront
  ```

**5. Mise en Place du Back-End**  
- Utiliser le template suivant pour générer le projet Back :  
  ```bash
  npm install -g @romgio/create-express-ts-mariadb-api
  npm install -g yarn   # à exécuter si nécessaire
  npx @romgio/create-express-ts-mariadb-api GestEPIBack
  ```

**6. Création d’un Package Commun pour les Types (GestEPIInterfaces)**

*Objectif :* Partager les interfaces et enums entre le Front et le Back.

- **a. Création du Package**  
  1. Dans le répertoire principal « GestEPI » (contenant Front et Back), créer un nouveau dossier :
     ```bash
     mkdir GestEPIInterfaces
     cd GestEPIInterfaces
     npm init
     ```
     *Pendant l'initialisation, répondre aux questions de npm avec soin.*

  2. Installer TypeScript en tant que dépendance de développement :
     ```bash
     npm install typescript --save-dev
     ```

- **b. Configuration de TypeScript**  
  - Créer un fichier `tsconfig.json` à la racine avec les options suivantes :  
    - `"declaration": true` (génération des fichiers `.d.ts`)  
    - `"outDir": "./dist"` (répertoire de sortie)  
    - `"include": ["src/**/*"]` (inclusion de tous les fichiers du dossier `src`)

- **c. Modification du package.json**  
  - Mettre à jour les propriétés clés :
    - `"main": "dist/index.d.ts",`
    - `"types": "dist/types.d.ts",`
    - Ajouter le script `"build": "tsc"`
    - Ajouter `"files": ["dist"]` pour ne publier que le contenu compilé.
    
    *Exemple :*
    ```json
    {
      "name": "gestepiinterfaces**rgio**",
      "version": "1.0.0",
      "main": "dist/index.d.ts",
      "types": "dist/types.d.ts",
      "scripts": {
        "build": "tsc"
      },
      "files": [
        "dist"
      ],
      "keywords": [],
      "author": "Roméo Giorgio",
      "license": "ISC",
      "description": "",
      "devDependencies": {
        "typescript": "^5.6.3"
      }
    }
    ```

- **d. Création et Exportation des Types**  
  - Créer le fichier `/src/types.ts` dans lequel définir toutes les interfaces et enums utiles (par exemple, pour les EPI et les contrôles).  
  - Dans le fichier `/src/index.ts`, exporter les types que vous souhaitez rendre publics.

- **e. Compilation et Publication du Package**  
  1. Compiler le projet :
     ```bash
     npm run build
     ```
  2. Publier le package sur npm :
     - Se connecter avec :
       ```bash
       npm login
       ```
     - Publier en mode public :
       ```bash
       npm publish --access public
       ```

- **f. Utilisation du Package dans les Projets**  
  - Dans vos projets Front et Back, installer le package en utilisant :
    ```bash
    npm install <nom-du-package-des-types>
    ```
    ou avec yarn :
    ```bash
    yarn add <nom-du-package-des-types>
    ```

------------------------------------------------------------
**Résumé Final :**

- **Objectif :** Créer une application de gestion des EPI incluant la saisie, le suivi, la consultation des contrôles et la mise en place d’alertes.
- **Architecture :**  
  - Front-End et Back-End séparés, générés avec les templates indiqués.  
  - Un package commun (GestEPIInterfaces) pour partager les types entre les deux briques.
- **Processus :**  
  1. Définir la modélisation des EPI et des contrôles.  
  2. Implémenter les fonctionnalités de saisie, consultation et alertes.  
  3. Créer et configurer le package d’interfaces.  
  4. Compiler et publier le package, puis l’intégrer dans les projets Front et Back.

------------------------------------------------------------
Fin des instructions.

Ces étapes doivent être suivies pour garantir une mise en œuvre cohérente et intégrée du projet GestEPI.  