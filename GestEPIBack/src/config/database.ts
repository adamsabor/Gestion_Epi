// ************************************************************************
// üéì FICHIER DE CONFIGURATION DE LA BASE DE DONN√âES - PROJET GESTEPI
// Pour l'√©preuve E6 BTS SIO SLAM
// ************************************************************************

// üìå IMPORTS N√âCESSAIRES
// mysql2/promise : Module qui permet de se connecter √† MySQL et d'ex√©cuter des requ√™tes SQL
// Le mode "promise" permet d'utiliser async/await pour g√©rer l'asynchrone plus facilement
import mysql from 'mysql2/promise';

// dotenv : Module qui charge les variables d'environnement depuis un fichier .env
// Ces variables contiennent les informations sensibles comme les mots de passe
import dotenv from 'dotenv';

// ‚öôÔ∏è CONFIGURATION DES VARIABLES D'ENVIRONNEMENT
// On charge le fichier .env qui contient nos variables de configuration
// Exemple de contenu du .env :
// DB_HOST=localhost
// DB_USER=root
// DB_PASSWORD=motdepasse
dotenv.config();

// üîç V√âRIFICATION DE LA CONFIGURATION (DEBUG)
// On affiche les param√®tres de connexion dans la console
// Le mot de passe est masqu√© pour la s√©curit√©
console.log('Configuration de la base de donn√©es:', {
  host: process.env.DB_HOST,
  port: process.env.DB_PORT,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD ? '******' : '(vide)',
  database: process.env.DB_NAME
});

// üåä CR√âATION DU POOL DE CONNEXIONS
// Un pool de connexions permet de r√©utiliser les connexions plut√¥t que d'en cr√©er
// de nouvelles √† chaque requ√™te, ce qui am√©liore les performances
export const db = mysql.createPool({
  // Param√®tres de connexion avec valeurs par d√©faut si non d√©finies dans .env
  host: process.env.DB_HOST || 'localhost',      // Adresse du serveur MySQL
  port: parseInt(process.env.DB_PORT || '8889'), // Port MySQL (8889 pour MAMP)
  user: process.env.DB_USER || 'root',          // Nom d'utilisateur MySQL
  password: process.env.DB_PASSWORD || '',       // Mot de passe MySQL
  database: process.env.DB_NAME || 'gestepi',   // Nom de la base de donn√©es

  // Configuration du pool de connexions
  waitForConnections: true,     // Met en attente les connexions si pool plein
  connectionLimit: 10,          // Nombre maximum de connexions simultan√©es
  queueLimit: 0                 // Nombre illimit√© de connexions en attente
});

// üîå FONCTION DE TEST DE CONNEXION
// Fonction asynchrone qui v√©rifie si la connexion √† la BDD fonctionne
// Promise<void> signifie que la fonction ne renvoie rien mais est asynchrone
export const testConnection = async (): Promise<void> => {
  try {
    // On tente d'obtenir une connexion du pool
    const connection = await db.getConnection();
    console.log('Connexion √† la base de donn√©es √©tablie avec succ√®s');
    // On lib√®re la connexion pour qu'elle retourne dans le pool
    connection.release();
  } catch (error) {
    // En cas d'erreur, on l'affiche et on la propage
    console.error('Erreur lors de la connexion √† la base de donn√©es:', error);
    throw error;
  }
};

// üìù R√âSUM√â POUR L'√âPREUVE E6
// Ce fichier est crucial car il g√®re la connexion √† la base de donn√©es MySQL.
// Points importants √† retenir :
// 1. Utilisation des variables d'environnement pour la s√©curit√©
// 2. Pool de connexions pour optimiser les performances
// 3. Gestion des erreurs avec try/catch
// 4. Fonction de test pour v√©rifier la connexion
//
// Pour l'oral :
// - Expliquer l'importance de la s√©curit√© (variables d'environnement)
// - Parler de l'optimisation (pool de connexions)
// - Mentionner la gestion des erreurs
// - Souligner l'importance des logs pour le debug