// ************************************************************************
// üéì MIDDLEWARES EXPRESS - PROJET GESTEPI 
// Pour l'√©preuve E6 BTS SIO SLAM
// ************************************************************************

// üìö IMPORTS N√âCESSAIRES
// Express.js fournit des types TypeScript pour typer nos fonctions
// Request : Contient toutes les informations de la requ√™te HTTP entrante
// Response : Permet de construire et envoyer la r√©ponse HTTP
// NextFunction : Fonction pour passer au middleware suivant dans la cha√Æne
import { NextFunction, Request, Response } from "express";

// On importe notre interface personnalis√©e pour les erreurs
// Elle d√©finit la structure exacte que doivent avoir nos messages d'erreur
import ErrorResponse from "./pages/interfaces/ErrorResponse";

// üõ°Ô∏è MIDDLEWARE 404 - ROUTES NON TROUV√âES
// Ce middleware est ex√©cut√© quand aucune route ne correspond √† l'URL demand√©e
// Important pour l'E6 : Comprendre qu'il agit comme un "filet de s√©curit√©"
export const notFound = (
  request: Request,           // La requ√™te HTTP avec l'URL non trouv√©e
  response: Response,         // L'objet pour construire notre r√©ponse d'erreur
  nextFunction: NextFunction  // Permet de transmettre l'erreur au handler suivant
) => {
  // On d√©finit le statut HTTP 404 (Not Found)
  response.status(404);
  // On cr√©e une erreur avec l'URL qui a pos√© probl√®me
  // request.originalUrl contient l'URL compl√®te demand√©e
  const error = new Error(`Not found - ${request.originalUrl}`);
  // On passe l'erreur au gestionnaire global
  nextFunction(error);
};

// üîç GESTIONNAIRE D'ERREURS GLOBAL
// Ce middleware centralise la gestion de TOUTES les erreurs de l'application
// Pour l'E6 : C'est un point crucial pour la maintenance et le d√©bogage
export const errorHandler = (
  error: Error,              // L'erreur qui s'est produite (message + stack)
  request: Request,          // La requ√™te qui a caus√© l'erreur
  response: Response<ErrorResponse>, // R√©ponse typ√©e avec notre interface
  nextFunction: NextFunction // Rarement utilis√© dans un error handler
) => {
  // LOGIQUE DU CODE HTTP
  // Si un code d'erreur existe d√©j√† et n'est pas 200 (succ√®s)
  // on le garde, sinon on utilise 500 (erreur serveur)
  const statusCode = response.statusCode !== 200 ? response.statusCode : 500;
  
  // ENVOI DE LA R√âPONSE
  // Format JSON standardis√© pour toutes nos erreurs
  // message : Description claire de l'erreur pour l'utilisateur
  // stack : Trace technique pour le d√©veloppement (√† retirer en production)
  response
    .status(statusCode)
    .json({ message: error.message, stack: error.stack });
};

// üìù R√âSUM√â POUR L'√âPREUVE E6
// Ce fichier est crucial car il :
// 1. G√®re de fa√ßon centralis√©e toutes les erreurs de l'API
// 2. Assure une r√©ponse coh√©rente pour les URLs invalides
// 3. Standardise le format des messages d'erreur
//
// Points techniques √† souligner :
// - Utilisation des middlewares Express
// - Typage strict avec TypeScript
// - Gestion professionnelle des erreurs
// - Bonnes pratiques de d√©veloppement
