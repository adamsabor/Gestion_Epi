//********** Imports **********//
// Express : Framework Node.js qui simplifie la cr√©ation d'API web
import express from "express";
// CORS : Permet √† notre API de communiquer avec le front-end React de mani√®re s√©curis√©e
import cors from "cors";
// dotenv : Charge les variables d'environnement depuis un fichier .env (ex: ports, URLs...)
import dotenv from 'dotenv';
// Importe toutes nos routes API d√©finies dans le dossier routes
import { router as apiRoutes } from './routes/index';
// Importe les middlewares personnalis√©s pour g√©rer les erreurs
import * as middlewares from './middlewares';

// Charge les variables du fichier .env dans process.env
// Exemple : process.env.PORT pour le port du serveur
dotenv.config();

// Cr√©e une nouvelle application Express - C'est le point de d√©part de notre serveur
const app = express();

// Permet √† l'API de comprendre les donn√©es JSON envoy√©es par le front
// Sans ce middleware, on ne pourrait pas lire les donn√©es POST/PUT
app.use(express.json());

// Configuration de la s√©curit√© CORS pour autoriser les requ√™tes du front-end
// CORS est crucial car le front et le back sont sur des ports diff√©rents
app.use(cors({
  // Autorise uniquement les requ√™tes venant de notre front React
  origin: process.env.FRONTEND_URL || 'http://localhost:3000',
  // D√©finit les m√©thodes HTTP autoris√©es (GET pour lire, POST pour cr√©er, etc.)
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
  // Autorise ces en-t√™tes dans les requ√™tes
  allowedHeaders: ['Content-Type', 'Authorization']
}));

// Connecte toutes nos routes d'API sous le pr√©fixe '/api'
// Exemple: /api/controles, /api/epis, etc.
app.use('/api', apiRoutes);

// Route simple pour v√©rifier que l'API fonctionne
// Utile pour les tests ou la surveillance du serveur
app.get('/', (req, res) => {
  res.json({ message: 'API GestEPI fonctionnelle' });
});

// Gestion des erreurs avec nos middlewares personnalis√©s
// notFound : G√®re les routes qui n'existent pas (404)
// errorHandler : G√®re toutes les autres erreurs de mani√®re propre
app.use(middlewares.notFound);
app.use(middlewares.errorHandler);

// Ces lignes sont comment√©es car le serveur est d√©marr√© ailleurs (probablement dans index.ts)
// const PORT = process.env.PORT || 3001;
// app.listen(PORT, () => {
//     console.log(`Serveur d√©marr√© sur http://localhost:${PORT} üöÄ`);
// });

// Exporte l'application pour pouvoir la d√©marrer depuis un autre fichier
export default app;

/*
R√âSUM√â DU FICHIER app.ts :
Ce fichier est le c≈ìur de notre API GestEPI. Il :
1. Configure le serveur Express et ses fonctionnalit√©s essentielles
2. G√®re la s√©curit√© avec CORS pour communiquer avec le front React
3. Connecte toutes nos routes d'API (/api/controles, /api/epis, etc.)
4. Met en place la gestion des erreurs

C'est comme le "chef d'orchestre" qui coordonne tous les composants 
de notre back-end (routes, contr√¥leurs, mod√®les) pour servir les 
demandes du front-end React.
*/