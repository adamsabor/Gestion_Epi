// ************************************************************************
// üéì FICHIER DE TYPES TYPESCRIPT - PROJET GESTEPI 
// Pour l'√©preuve E6 BTS SIO SLAM
// ************************************************************************

// üìö D√âFINITION DES TYPES
// Ce fichier est crucial car il d√©finit tous les types TypeScript utilis√©s dans l'application
// Il sert de "contrat" pour s'assurer que les donn√©es sont correctement structur√©es

// ********** TYPES D'√âQUIPEMENTS **********
// Une √©num√©ration (enum) est un type sp√©cial qui permet de d√©finir un ensemble de constantes nomm√©es
// Ici on liste tous les types d'EPI possibles dans l'application
// L'avantage est qu'on ne peut pas utiliser d'autres valeurs que celles d√©finies ici
export enum TypeEPIEnum {
  CASQUE = 'CASQUE',        // Pour prot√©ger la t√™te lors des travaux en hauteur
  HARNAIS = 'HARNAIS',      // √âquipement principal de s√©curit√© qui retient le corps
  LONGE = 'LONGE',          // Corde ou sangle qui relie le harnais au point d'ancrage
  MOUSQUETON = 'MOUSQUETON', // Connecteur m√©tallique pour relier les √©quipements
  AUTRE = 'AUTRE'           // Cat√©gorie pour les √©quipements non standards
}

// ********** STRUCTURE D'UN EPI **********
// Une interface d√©finit la structure exacte d'un objet
// C'est comme un plan qui dit quelles propri√©t√©s doit avoir un EPI
// Le ? apr√®s le nom signifie que la propri√©t√© est optionnelle
export interface EPI {
  id?: number;                      // Cl√© primaire en base de donn√©es (auto-incr√©ment√©e)
  identifiant_custom: string;       // Code unique attribu√© par l'entreprise (ex: EPI-2024-001)
  marque: string;                   // Nom du fabricant (ex: Petzl, Black Diamond)
  modele: string;                   // R√©f√©rence du produit (ex: VERTEX VENT)
  num√©ro_s√©rie: string;             // Num√©ro unique du fabricant pour la tra√ßabilit√©
  taille?: string;                  // Optionnel - Utile pour les harnais (S, M, L, etc.)
  couleur?: string;                 // Optionnel - Pour identifier facilement l'√©quipement
  date_achat: Date | string;        // Date d'acquisition - Format accept√©: Date ou string
  date_fabrication: Date | string;  // Date de production par le fabricant
  date_mise_en_service: Date | string; // Date de premi√®re utilisation
  p√©riodicit√©_controle: number;     // Nombre de mois entre chaque contr√¥le obligatoire
  epi_type_id: number;              // Cl√© √©trang√®re vers la table des types d'EPI
}

// ********** TYPE D'EPI SIMPLIFI√â **********
// Structure pour la table de r√©f√©rence des types d'EPI
// Utilis√©e dans les relations avec la table principale des EPI
export interface TypeEPI {
  id?: number;    // Cl√© primaire auto-incr√©ment√©e
  nom: string;    // Nom du type (doit correspondre √† TypeEPIEnum)
}

// ********** STATUTS DE CONTR√îLE **********
// √ânum√©ration des √©tats possibles apr√®s un contr√¥le
// Permet de suivre le cycle de vie des √©quipements
export enum StatutControle {
  OPERATIONNEL = "Op√©rationnel",  // EPI v√©rifi√© et s√ªr d'utilisation
  A_REPARER = "√Ä r√©parer",        // EPI n√©cessitant une maintenance
  MIS_AU_REBUT = "Mis au rebut"   // EPI √† retirer d√©finitivement du service
}

// ********** STRUCTURE D'UN CONTR√îLE **********
// D√©finit les donn√©es n√©cessaires pour tracer un contr√¥le d'EPI
// Chaque contr√¥le est li√© √† un EPI et un gestionnaire
export interface Controle {
  id?: number;                   // Identifiant unique en base de donn√©es
  date_controle: string;        // Date de r√©alisation du contr√¥le
  gestionnaire_id: number;      // Cl√© √©trang√®re vers l'utilisateur qui fait le contr√¥le
  epi_id: number;              // Cl√© √©trang√®re vers l'EPI contr√¥l√©
  statut_id: number;           // Cl√© √©trang√®re vers le statut attribu√©
  remarques?: string;          // Notes optionnelles sur l'√©tat de l'√©quipement
}

// ********** STATUT G√âN√âRAL D'UN EPI **********
// Table de r√©f√©rence pour les diff√©rents √©tats possibles
export interface StatutEPI {
  id?: number;    // Cl√© primaire auto-incr√©ment√©e
  nom: string;    // Libell√© du statut
}

// ********** STRUCTURE D'UN UTILISATEUR **********
// D√©finit les informations requises pour chaque utilisateur
export interface Utilisateur {
  id?: number;        // Cl√© primaire auto-incr√©ment√©e
  nom: string;        // Nom de famille de l'utilisateur
  pr√©nom: string;     // Pr√©nom de l'utilisateur
  email: string;      // Email unique servant d'identifiant
  user_type_id: number; // Cl√© √©trang√®re vers le type d'utilisateur
}

// ********** TYPE D'UTILISATEUR **********
// Table de r√©f√©rence pour les r√¥les utilisateur
export interface TypeUtilisateur {
  id?: number;    // Cl√© primaire auto-incr√©ment√©e
  nom: string;    // Nom du r√¥le (ex: Admin, Gestionnaire)
}

// üìù R√âSUM√â POUR L'√âPREUVE E6
// Ce fichier est fondamental car il :
// 1. D√©finit tous les types de donn√©es utilis√©s dans l'application
// 2. Assure la coh√©rence des donn√©es entre le front-end et le back-end
// 3. Facilite la maintenance en centralisant les structures de donn√©es
// 4. Permet la d√©tection d'erreurs avant l'ex√©cution gr√¢ce au typage fort
//
// Points techniques √† souligner :
// - Utilisation de TypeScript pour la s√©curit√© du typage
// - Mod√©lisation des donn√©es m√©tier
// - Relations entre les tables (cl√©s √©trang√®res)
// - Documentation claire pour la maintenabilit√©