// ************************************************************************
// üéì ROUTES DES EPI - PROJET GESTEPI 
// Pour l'√©preuve E6 BTS SIO SLAM
// ************************************************************************

// üìö IMPORTS N√âCESSAIRES
// Express est le framework Node.js qu'on utilise pour cr√©er notre API
// Il nous permet de d√©finir facilement nos routes et de g√©rer les requ√™tes HTTP
import express from 'express';

// On importe notre contr√¥leur qui contient toute la logique m√©tier
// C'est lui qui va traiter les requ√™tes et renvoyer les r√©ponses
import { EpiController } from '../controllers/epiController';

// üõ†Ô∏è CR√âATION DU ROUTER
// Le Router d'Express permet de regrouper les routes par fonctionnalit√©
// Ici on regroupe toutes les routes li√©es aux EPI
const router = express.Router();

// On cr√©e une instance de notre contr√¥leur
// Cette instance sera utilis√©e par toutes nos routes
const epiController = new EpiController();

// üîÑ D√âFINITION DES ROUTES
// Chaque route est un endpoint API qui peut √™tre appel√© par le front-end

// Route GET pour r√©cup√©rer tous les EPI
// - M√©thode HTTP : GET car on veut lire des donn√©es
// - URL : '/' qui devient '/api/epis' avec le pr√©fixe global
// - Fonction : epiController.findAll qui sera ex√©cut√©e
console.log("‚úÖ Routes EPI initialis√©es");

router.get('/', (req, res) => {
  console.log('üîç Requ√™te GET re√ßue sur /api/epis');
  epiController.findAll(req, res);
});

// Route GET pour r√©cup√©rer un EPI sp√©cifique par son ID
// - :id est un param√®tre dynamique dans l'URL (ex: /api/epis/123)
// - Le contr√¥leur va utiliser cet ID pour chercher le bon EPI en BDD
router.get('/:id', epiController.findById);

// Route POST pour cr√©er un nouvel EPI
// - M√©thode HTTP : POST car on veut cr√©er une nouvelle ressource
// - Les donn√©es de l'EPI sont envoy√©es dans le corps (body) de la requ√™te
// - Le contr√¥leur va valider ces donn√©es avant de les sauvegarder en BDD
router.post('/', epiController.create);

// Route PUT pour modifier un EPI existant
// - M√©thode HTTP : PUT car on veut mettre √† jour une ressource
// - Combine l'ID dans l'URL et les nouvelles donn√©es dans le body
// - Le contr√¥leur v√©rifie que l'EPI existe avant la modification
router.put('/:id', epiController.update);

// Route DELETE pour supprimer un EPI
// - M√©thode HTTP : DELETE car on veut supprimer une ressource
// - L'ID dans l'URL identifie l'EPI √† supprimer
// - Le contr√¥leur v√©rifie les d√©pendances avant la suppression
router.delete('/:id', epiController.delete);

// üì§ EXPORT DU ROUTER
// On exporte notre router pour pouvoir l'utiliser dans app.ts
// Le 'as epiRoutes' permet de donner un nom explicite √† l'export
export { router as epiRoutes };

// üìù R√âSUM√â POUR L'√âPREUVE E6
// Ce fichier de routes est responsable de :
// 1. D√©finir les endpoints API pour la gestion des EPI
// 2. Faire le lien entre les URLs et les fonctions du contr√¥leur
// 3. Structurer l'API de fa√ßon professionnelle avec Express Router
//
// Points techniques √† souligner :
// - Architecture REST API
// - Pattern MVC (ce fichier est la partie "Route")
// - Utilisation d'Express.js
// - Organisation modulaire du code
// - Gestion des param√®tres d'URL