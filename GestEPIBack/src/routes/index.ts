// ************************************************************************
// üéì FICHIER PRINCIPAL DES ROUTES - PROJET GESTEPI
// Pour l'√©preuve E6 BTS SIO SLAM
// ************************************************************************

// üìö IMPORTS N√âCESSAIRES
// Express est le framework Node.js qu'on utilise pour cr√©er notre API
import express from 'express';

// On importe tous les contr√¥leurs qui g√®rent la logique m√©tier
// Chaque contr√¥leur est responsable d'une fonctionnalit√© sp√©cifique
import { epiRoutes } from './epiRoutes';               // Gestion des EPI
import { epiTypeController } from '../controllers/epiTypeController';         // Types d'EPI
import { controleController } from '../controllers/controleController';       // Contr√¥les
import { statutController } from '../controllers/statutController';           // Statuts
import { gestionnaireController } from '../controllers/gestionnaireController'; // Gestionnaires
import { alerteController } from '../controllers/alerteController';          // Alertes
import { login } from '../controllers/loginController';                      // Authentification
import { checkIsGestionnaire } from '../middlewares/checkIsGestionnaire';    // Middleware de s√©curit√©

// üõ†Ô∏è CR√âATION DU ROUTER PRINCIPAL
// Ce router va regrouper toutes nos routes et servir de point d'entr√©e
const router = express.Router();

// üîê AUTHENTIFICATION
// Route POST /login pour se connecter
// - Re√ßoit email/mot de passe dans le body
// - Renvoie un token JWT si authentification r√©ussie
router.post('/login', login);

// üì¶ GESTION DES EPI
// On utilise un sous-router d√©di√© aux EPI
// Toutes les routes commen√ßant par /epis seront g√©r√©es par epiRoutes
console.log("üîå Montage du sous-routeur /epis effectu√©");
router.use('/epis', epiRoutes);

// üìã TYPES D'EPI
// Route GET pour lister tous les types d'EPI disponibles
// Utilis√©e dans les formulaires de cr√©ation/modification d'EPI
router.get('/epi-types', epiTypeController.getAll);

// üîç CONTR√îLES
// Ensemble des routes pour g√©rer les contr√¥les des EPI
// - GET /controles : Liste tous les contr√¥les
// - GET /controles/:id : D√©tails d'un contr√¥le sp√©cifique
// - GET /controles/epi/:epiId : Historique des contr√¥les d'un EPI
// - POST /controles : Cr√©e un nouveau contr√¥le
router.get('/controles', controleController.getAll);
router.get('/controles/:id', controleController.getById);
router.get('/controles/epi/:epiId', controleController.getByEpiId);
router.post('/controles', controleController.create);

// üîÑ ROUTES DIVERSES
// Routes utilitaires pour r√©cup√©rer des donn√©es de r√©f√©rence
// - Statuts possibles des EPI
// - Liste des gestionnaires
// - Alertes en cours
router.get('/statuts', statutController.getAll);
router.get('/gestionnaires', gestionnaireController.getAll);
router.get('/alertes', alerteController.getAlertes);

// üì§ EXPORT DU ROUTER
export default router;

// üìù R√âSUM√â POUR L'√âPREUVE E6
// Ce fichier est le point d'entr√©e principal de l'API. Il :
// 1. Centralise toutes les routes de l'application
// 2. Organise les endpoints par fonctionnalit√©
// 3. Fait le lien avec les contr√¥leurs appropri√©s
//
// Points techniques √† souligner :
// - Architecture REST API
// - Pattern MVC (Routes -> Contr√¥leurs -> Mod√®les)
// - S√©curit√© (authentification)
// - Organisation modulaire du code
