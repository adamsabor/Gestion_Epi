// ************************************************************************
// üéì ROUTES DES CONTR√îLES - PROJET GESTEPI 
// Pour l'√©preuve E6 BTS SIO SLAM
// ************************************************************************

// üìö IMPORTS N√âCESSAIRES
// Express est le framework Node.js qu'on utilise pour cr√©er notre API
// Il nous permet de d√©finir facilement nos routes et de g√©rer les requ√™tes HTTP
import express from 'express';

// On importe notre contr√¥leur qui contient toute la logique m√©tier
// C'est lui qui va traiter les requ√™tes et renvoyer les r√©ponses
import { controleController } from '../controllers/controleController';

// üõ†Ô∏è CR√âATION DU ROUTER
// Le Router d'Express permet de regrouper les routes par fonctionnalit√©
// Ici on regroupe toutes les routes li√©es aux contr√¥les d'EPI
const router = express.Router();

// üîÑ D√âFINITION DES ROUTES
// Chaque route est un endpoint API qui peut √™tre appel√© par le front-end

// Route GET pour r√©cup√©rer tous les contr√¥les
// - M√©thode HTTP : GET car on veut lire des donn√©es
// - URL : '/' qui devient '/api/controles' avec le pr√©fixe global
// - Fonction : controleController.getAll qui sera ex√©cut√©e
router.get('/', controleController.getAll);

// Route GET pour r√©cup√©rer un contr√¥le sp√©cifique par son ID
// - :id est un param√®tre dynamique dans l'URL (ex: /api/controles/123)
// - Le contr√¥leur va utiliser cet ID pour chercher le bon contr√¥le en BDD
router.get('/:id', controleController.getById);

// Route GET pour r√©cup√©rer tous les contr√¥les d'un EPI sp√©cifique
// - :epiId permet d'identifier l'EPI dont on veut l'historique des contr√¥les
// - Tr√®s utile pour suivre les v√©rifications d'un √©quipement dans le temps
router.get('/epi/:epiId', controleController.getByEpiId);

// Route POST pour cr√©er un nouveau contr√¥le
// - M√©thode HTTP : POST car on veut cr√©er une nouvelle ressource
// - Les donn√©es du contr√¥le sont envoy√©es dans le corps (body) de la requ√™te
// - Le contr√¥leur va valider ces donn√©es avant de les sauvegarder en BDD
router.post('/', controleController.create);

// üì§ EXPORT DU ROUTER
// On exporte notre router pour pouvoir l'utiliser dans app.ts
// Le 'as controleRoutes' permet de donner un nom explicite √† l'export
export { router as controleRoutes };

// üìù R√âSUM√â POUR L'√âPREUVE E6
// Ce fichier de routes est responsable de :
// 1. D√©finir les endpoints API pour la gestion des contr√¥les d'EPI
// 2. Faire le lien entre les URLs et les fonctions du contr√¥leur
// 3. Structurer l'API de fa√ßon professionnelle avec Express Router
//
// Points techniques √† souligner :
// - Architecture REST API
// - Pattern MVC (ce fichier est la partie "Route")
// - Utilisation d'Express.js
// - Organisation modulaire du code
// - Gestion des param√®tres d'URL