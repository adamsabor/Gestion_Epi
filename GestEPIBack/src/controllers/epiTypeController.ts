// ************************************************************************
// üéì CONTR√îLEUR DES TYPES D'EPI - PROJET GESTEPI 
// Pour l'√©preuve E6 BTS SIO SLAM
// ************************************************************************

// üìö IMPORTS N√âCESSAIRES
// Request et Response sont des types TypeScript fournis par Express
// Ils permettent de typer les param√®tres des fonctions du contr√¥leur
import { Request, Response } from 'express';

// On importe le mod√®le qui g√®re les requ√™tes SQL pour les types d'EPI
// Le mod√®le fait le lien entre le contr√¥leur et la base de donn√©es
import { TypeEpiModel } from '../models/typeEpiModel';

// üéØ CLASSE CONTR√îLEUR
// Cette classe suit le pattern MVC (Mod√®le-Vue-Contr√¥leur)
// Elle re√ßoit les requ√™tes HTTP et coordonne les actions avec le mod√®le
export class EpiTypeController {
  // Propri√©t√© priv√©e qui stocke une instance du mod√®le
  // private = accessible uniquement dans cette classe
  private typeEpiModel: TypeEpiModel;

  // Constructeur = fonction appel√©e √† la cr√©ation de la classe
  // Il initialise le mod√®le pour pouvoir l'utiliser dans les m√©thodes
  constructor() {
    this.typeEpiModel = new TypeEpiModel();
  }

  // üì• M√âTHODE PRINCIPALE : R√âCUP√âRATION DES TYPES D'EPI
  // async/await = gestion asynchrone pour les requ√™tes SQL
  // Promise<void> = la fonction ne retourne rien mais est asynchrone
  getAll = async (req: Request, res: Response): Promise<void> => {
    try {
      // On appelle la m√©thode du mod√®le qui ex√©cute : SELECT * FROM types_epi
      const types = await this.typeEpiModel.findAll();
      
      // R√©ponse HTTP 200 (succ√®s) avec les donn√©es au format JSON
      // Le front-end recevra un objet avec message + donn√©es
      res.status(200).json({
        message: 'Types d\'EPI r√©cup√©r√©s avec succ√®s',
        data: types
      });

    } catch (error) {
      // En cas d'erreur (ex: probl√®me BDD)
      // On log l'erreur c√¥t√© serveur pour le debug
      console.error('Erreur lors de la r√©cup√©ration des types d\'EPI:', error);
      
      // On renvoie une erreur 500 (erreur serveur) au client
      // avec un message explicatif
      res.status(500).json({
        message: 'Erreur serveur lors de la r√©cup√©ration des types d\'EPI',
        error: error instanceof Error ? error.message : 'Erreur inconnue'
      });
    }
  };
}

// üì§ EXPORT
// On cr√©e et exporte directement une instance du contr√¥leur
// Cette instance sera import√©e et utilis√©e par les routes
export const epiTypeController = new EpiTypeController();

// üìù R√âSUM√â POUR L'√âPREUVE E6
// Ce contr√¥leur est responsable de la gestion des types d'EPI dans l'application.
// Points techniques √† souligner :
// 1. Architecture MVC avec s√©paration des responsabilit√©s
// 2. Utilisation de TypeScript pour la s√©curit√© du typage
// 3. Gestion des erreurs avec try/catch
// 4. Programmation asynchrone avec async/await
// 5. Communication avec la base de donn√©es via le mod√®le