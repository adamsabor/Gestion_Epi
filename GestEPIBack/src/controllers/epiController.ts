// ************************************************************************
// üéì CONTR√îLEUR DES EPI - PROJET GESTEPI 
// Pour l'√©preuve E6 BTS SIO SLAM
// ************************************************************************

// üìö IMPORTS N√âCESSAIRES
// Request et Response sont des types TypeScript fournis par Express
// Ils permettent de typer les param√®tres des fonctions du contr√¥leur
import { Request, Response } from 'express';

// On importe la connexion √† la base de donn√©es configur√©e dans database.ts
import { db } from '../config/database';

// üéØ CLASSE CONTR√îLEUR
// Cette classe suit le pattern MVC (Mod√®le-Vue-Contr√¥leur)
// Elle re√ßoit les requ√™tes HTTP et coordonne les actions avec la BDD
export class EpiController {

  // üì• M√âTHODE FINDALL : R√©cup√®re TOUS les EPI
  // async/await = gestion asynchrone pour les requ√™tes SQL
  // Promise<void> = la fonction ne retourne rien mais est asynchrone
  async findAll(req: Request, res: Response): Promise<void> {
    try {
      // Log pour tracer l'appel de la route
      console.log("üì• [EPI] ‚û§ Route atteinte : /api/epis");
  
      // Ex√©cution de la requ√™te SQL : SELECT * FROM Epi
      // Le r√©sultat est destructur√© avec [rows] pour r√©cup√©rer les donn√©es
      const [rows] = await db.query('SELECT * FROM Epi');
      console.log("‚úÖ [EPI] ‚û§ R√©sultats SQL :", rows);
  
      // R√©ponse HTTP 200 (succ√®s) avec les donn√©es au format JSON
      res.status(200).json({
        message: 'EPIs r√©cup√©r√©s avec succ√®s',
        data: rows
      });
    } catch (error) {
      // En cas d'erreur (ex: probl√®me BDD)
      console.error('‚ùå [EPI] ‚û§ Erreur SQL /api/epis :', error);
      res.status(500).json({
        message: 'Erreur lors de la r√©cup√©ration des EPIs',
        error: error instanceof Error ? error.message : 'Erreur inconnue'
      });
    }
  }

  // üîç M√âTHODE FINDBYID : Trouve un EPI par son ID
  // req.params.id = param√®tre dans l'URL (ex: /epis/123)
  async findById(req: Request, res: Response): Promise<void | Response> {
    try {
      // Conversion de l'ID en nombre et v√©rification
      const id = parseInt(req.params.id);
      if (isNaN(id)) {
        return res.status(400).json({ message: "ID d'EPI invalide." });   
      }

      // Requ√™te SQL pr√©par√©e avec param√®tre [id] pour √©viter les injections SQL
      const [rows] = await db.query('SELECT * FROM Epi WHERE id = ?', [id]);

      // V√©rification si l'EPI existe
      const epi = Array.isArray(rows) && rows.length > 0 ? rows[0] : null;
      if (!epi) {
        return res.status(404).json({ message: 'EPI non trouv√©.' });
      }

      res.status(200).json({
        message: 'EPI r√©cup√©r√© avec succ√®s',
        data: epi
      });
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration de l\'EPI :', error);
      res.status(500).json({ message: 'Erreur serveur.' });
    }
  }

  // ‚ûï M√âTHODE CREATE : Cr√©e un nouvel EPI
  // req.body contient les donn√©es envoy√©es par le client (formulaire)
  async create(req: Request, res: Response): Promise<void> {
    try {
      // Requ√™te SQL pr√©par√©e avec les champs de la table
      const query = `
        INSERT INTO Epi (
          identifiant_custom, marque, modele, num√©ro_s√©rie,
          taille, couleur, date_achat, date_fabrication,
          date_mise_en_service, p√©riodicit√©_controle,
          epi_type_id, statut_id
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
      `;

      // Tableau des valeurs √† ins√©rer, avec gestion des valeurs nulles
      const values = [
        req.body.identifiant_custom,
        req.body.marque,
        req.body.modele,
        req.body.num√©ro_s√©rie,
        req.body.taille || null,
        req.body.couleur || null,
        req.body.date_achat || null,
        req.body.date_fabrication || null,
        req.body.date_mise_en_service || null,
        req.body.p√©riodicit√©_controle,
        req.body.epi_type_id,
        req.body.statut_id
      ];

      // Ex√©cution de la requ√™te et r√©cup√©ration de l'ID ins√©r√©
      const [result]: any = await db.query(query, values);
      res.status(201).json({
        message: 'EPI cr√©√© avec succ√®s',
        data: { id: result.insertId, ...req.body }
      });
    } catch (error) {
      console.error('‚ùå Erreur lors de la cr√©ation de l\'EPI :', error);
      res.status(500).json({
        message: 'Erreur lors de la cr√©ation de l\'EPI',
        error: error instanceof Error ? error.message : 'Erreur inconnue'
      });
    }
  }

  // üîÑ M√âTHODE UPDATE : Met √† jour un EPI existant
  async update(req: Request, res: Response): Promise<void | Response> {
    try {
      const id = parseInt(req.params.id);
      
      // Requ√™te SQL UPDATE avec tous les champs
      const query = `
        UPDATE Epi SET
          identifiant_custom = ?, marque = ?, mod√®le = ?,
          num√©ro_s√©rie = ?, taille = ?, couleur = ?,
          date_achat = ?, date_fabrication = ?,
          date_mise_en_service = ?, p√©riodicit√©_controle = ?,
          epi_type_id = ?, statut_id = ?
        WHERE id = ?
      `;

      // Valeurs √† mettre √† jour + ID pour la clause WHERE
      const values = [
        req.body.identifiant_custom,
        req.body.marque,
        req.body.mod√®le,
        req.body.num√©ro_s√©rie,
        req.body.taille || null,
        req.body.couleur || null,
        req.body.date_achat || null,
        req.body.date_fabrication || null,
        req.body.date_mise_en_service || null,
        req.body.p√©riodicit√©_controle,
        req.body.epi_type_id,
        req.body.statut_id,
        id
      ];

      const [result]: any = await db.query(query, values);
      
      // V√©rification si l'EPI existait
      if (result.affectedRows === 0) {
        return res.status(404).json({ message: 'EPI non trouv√©' });
      }

      res.status(200).json({
        message: 'EPI mis √† jour avec succ√®s',
        data: { id, ...req.body }
      });
    } catch (error) {
      console.error('‚ùå Erreur lors de la mise √† jour de l\'EPI :', error);
      res.status(500).json({
        message: 'Erreur lors de la mise √† jour de l\'EPI',
        error: error instanceof Error ? error.message : 'Erreur inconnue'
      });
    }
  }

  // ‚ùå M√âTHODE DELETE : Supprime un EPI
  async delete(req: Request, res: Response): Promise<void | Response> {
    try {
      const id = parseInt(req.params.id);
      // Requ√™te SQL DELETE avec clause WHERE sur l'ID
      const [result]: any = await db.query('DELETE FROM Epi WHERE id = ?', [id]);
      
      if (result.affectedRows === 0) {
        return res.status(404).json({ message: 'EPI non trouv√©' });
      }

      res.status(200).json({
        message: 'EPI supprim√© avec succ√®s'
      });
    } catch (error) {
      console.error('‚ùå Erreur lors de la suppression de l\'EPI :', error);
      res.status(500).json({
        message: 'Erreur lors de la suppression de l\'EPI',
        error: error instanceof Error ? error.message : 'Erreur inconnue'
      });
    }
  }
}

// üì§ EXPORT
// On cr√©e et exporte directement une instance du contr√¥leur
export const epiController = new EpiController();

// üìù R√âSUM√â POUR L'√âPREUVE E6
// Ce contr√¥leur est crucial car il g√®re toute la logique des EPI :
// 1. Structure en MVC (s√©paration des responsabilit√©s)
// 2. CRUD complet (Create, Read, Update, Delete)
// 3. Validation des donn√©es
// 4. Gestion des erreurs
// 5. Requ√™tes SQL pr√©par√©es (s√©curit√©)
//
// Points techniques √† souligner :
// - Utilisation de TypeScript pour la s√©curit√© du typage
// - Programmation asynchrone avec async/await
// - Pattern MVC
// - Gestion des erreurs avec try/catch
// - Logs pour le debug
