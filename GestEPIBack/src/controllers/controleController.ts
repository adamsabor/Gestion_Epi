// ************************************************************************
// üéì CONTR√îLEUR DES CONTR√îLES D'EPI - PROJET GESTEPI 
// Pour l'√©preuve E6 BTS SIO SLAM
// ************************************************************************

// üìö IMPORTS N√âCESSAIRES
// Request et Response sont des types TypeScript fournis par Express
// Ils permettent de typer les param√®tres des fonctions du contr√¥leur
import { Request, Response } from 'express';

// On importe le mod√®le qui g√®re les requ√™tes SQL pour les contr√¥les
// Le mod√®le fait le lien entre le contr√¥leur et la base de donn√©es
import { ControleModel } from '../models/controleModel';

// On importe l'interface Controle qui d√©finit la structure exacte d'un contr√¥le
// Cette interface sert de "contrat" pour s'assurer qu'on manipule les bonnes donn√©es
import { Controle } from '../types';

// üéØ CLASSE CONTR√îLEUR
// Cette classe suit le pattern MVC (Mod√®le-Vue-Contr√¥leur)
// Elle re√ßoit les requ√™tes HTTP et coordonne les actions avec le mod√®le
export class ControleController {
  // Propri√©t√© priv√©e qui stocke une instance du mod√®le
  // private = accessible uniquement dans cette classe
  private controleModel: ControleModel;

  // Constructeur = fonction appel√©e √† la cr√©ation de la classe
  // Il initialise le mod√®le pour pouvoir l'utiliser dans les m√©thodes
  constructor() {
    this.controleModel = new ControleModel();
  }

  // üì• M√âTHODE : R√âCUP√âRER TOUS LES CONTR√îLES
  // async/await = gestion asynchrone pour les requ√™tes SQL
  // Promise<void> = la fonction ne retourne rien mais est asynchrone
  getAll = async (req: Request, res: Response): Promise<void> => {
    try {
      // On appelle la m√©thode du mod√®le qui ex√©cute : SELECT * FROM controles
      const controles = await this.controleModel.findAll();
      
      // R√©ponse HTTP 200 (succ√®s) avec les donn√©es au format JSON
      res.status(200).json({ 
        message: 'Contr√¥les r√©cup√©r√©s avec succ√®s', 
        data: controles 
      });
    } catch (error) {
      // En cas d'erreur (ex: probl√®me BDD), on log et on renvoie une erreur 500
      console.error('Erreur lors de la r√©cup√©ration des contr√¥les:', error);
      res.status(500).json({ message: 'Erreur serveur lors de la r√©cup√©ration des contr√¥les' });
    }
  };

  // üîç M√âTHODE : R√âCUP√âRER UN CONTR√îLE PAR SON ID
  // req.params.id = param√®tre dans l'URL (ex: /controles/123)
  getById = async (req: Request, res: Response): Promise<void> => {
    try {
      // On convertit l'ID de la cha√Æne en nombre
      const id = parseInt(req.params.id);
      
      // Requ√™te SQL : SELECT * FROM controles WHERE id = ?
      const controle = await this.controleModel.findById(id);
      
      // Si aucun contr√¥le trouv√©, erreur 404 (Not Found)
      if (!controle) {
        res.status(404).json({ message: 'Contr√¥le non trouv√©' });
        return;
      }
      
      res.status(200).json({ message: 'Contr√¥le r√©cup√©r√© avec succ√®s', data: controle });
    } catch (error) {
      console.error(`Erreur lors de la r√©cup√©ration du contr√¥le avec l'ID ${req.params.id}:`, error);
      res.status(500).json({ message: 'Erreur serveur lors de la r√©cup√©ration du contr√¥le' });
    }
  };

  // üìö M√âTHODE : R√âCUP√âRER LES CONTR√îLES D'UN EPI
  // Permet d'avoir l'historique des contr√¥les pour un EPI donn√©
  getByEpiId = async (req: Request, res: Response): Promise<void> => {
    try {
      const epiId = parseInt(req.params.epiId);
      
      // Requ√™te SQL : SELECT * FROM controles WHERE epi_id = ?
      const controles = await this.controleModel.findByEpiId(epiId);
      
      res.status(200).json({ message: 'Contr√¥les r√©cup√©r√©s avec succ√®s', data: controles });
    } catch (error) {
      console.error(`Erreur lors de la r√©cup√©ration des contr√¥les pour l'EPI avec l'ID ${req.params.epiId}:`, error);
      res.status(500).json({ message: 'Erreur serveur lors de la r√©cup√©ration des contr√¥les' });
    }
  };

  // ‚ú® M√âTHODE : CR√âER UN NOUVEAU CONTR√îLE
  // req.body contient les donn√©es envoy√©es par le client (formulaire)
  create = async (req: Request, res: Response): Promise<void> => {
    try {
      // On type les donn√©es re√ßues avec l'interface Controle
      const controleData = req.body as Controle;
      
      // Validation des donn√©es obligatoires
      if (!controleData.date_controle || !controleData.gestionnaire_id || 
          !controleData.epi_id || !controleData.statut_id) {
        res.status(400).json({ message: 'Donn√©es de contr√¥le incompl√®tes' });
        return;
      }
      
      // Requ√™te SQL : INSERT INTO controles (...) VALUES (...)
      const createdControle = await this.controleModel.create(controleData);
      
      // Status 201 = Created
      res.status(201).json({ message: 'Contr√¥le cr√©√© avec succ√®s', data: createdControle });
    } catch (error) {
      console.error('Erreur lors de la cr√©ation du contr√¥le:', error);
      res.status(500).json({ message: 'Erreur serveur lors de la cr√©ation du contr√¥le' });
    }
  };
}

// üì§ EXPORT
// On cr√©e et exporte directement une instance du contr√¥leur
export const controleController = new ControleController();

// üìù R√âSUM√â POUR L'√âPREUVE E6
// Ce contr√¥leur est crucial car il g√®re toute la logique des contr√¥les d'EPI :
// 1. Structure en MVC (s√©paration des responsabilit√©s)
// 2. Gestion des requ√™tes HTTP (GET, POST)
// 3. Validation des donn√©es
// 4. Gestion des erreurs
// 5. Communication avec la base de donn√©es via le mod√®le
//
// Points techniques √† souligner :
// - Utilisation de TypeScript pour la s√©curit√© du typage
// - Programmation asynchrone avec async/await
// - Pattern MVC
// - Gestion des erreurs avec try/catch