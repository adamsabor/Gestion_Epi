// ************************************************************************
// üéì CONTR√îLEUR D'AUTHENTIFICATION - PROJET GESTEPI 
// Pour l'√©preuve E6 BTS SIO SLAM
// ************************************************************************

// üìö IMPORTS N√âCESSAIRES
// Request et Response sont des types TypeScript fournis par Express
// Ils permettent de typer les param√®tres des fonctions du contr√¥leur
import { Request, Response } from 'express';

// On importe la connexion √† la base de donn√©es configur√©e dans database.ts
// Le pool de connexions permet de g√©rer efficacement les requ√™tes SQL
import { db as pool } from '../config/database';

// üîê FONCTION D'AUTHENTIFICATION
// Cette fonction est le point d'entr√©e pour la connexion des utilisateurs
// async/await permet d'attendre les r√©ponses de la base de donn√©es
export const login = async (req: Request, res: Response) => {
  // On extrait email et mot_de_passe du corps de la requ√™te (req.body)
  // Ces donn√©es sont envoy√©es par le formulaire de connexion du front-end
  const { email, mot_de_passe } = req.body;

  // Log pour tracer les tentatives de connexion (utile pour le debug)
  console.log("üî• Tentative de login :", email);

  try {
    // REQU√äTE SQL S√âCURIS√âE
    // 1. On cherche l'utilisateur par son email dans la table Utilisateur
    // 2. Le ? est un param√®tre qui prot√®ge contre les injections SQL
    // 3. [rows] utilise la destructuration pour r√©cup√©rer les r√©sultats
    const [rows]: any = await pool.query('SELECT * FROM Utilisateur WHERE email = ?', [email]);
    
    // On r√©cup√®re le premier (et normalement unique) utilisateur trouv√©
    const user = rows[0];

    // V√âRIFICATION 1 : L'UTILISATEUR EXISTE-T-IL ?
    // Si aucun utilisateur trouv√© avec cet email, on renvoie une erreur 401
    // 401 = "Non autoris√©" en HTTP
    if (!user) {
      return res.status(401).json({ message: 'Utilisateur introuvable' });
    }

    // V√âRIFICATION 2 : MOT DE PASSE CORRECT ?
    // ‚ö†Ô∏è NOTE IMPORTANTE POUR L'E6 : 
    // Cette comparaison directe n'est pas s√©curis√©e !
    // En production, il faudrait utiliser bcrypt pour hasher les mots de passe
    if (mot_de_passe !== user.mot_de_passe) {
      return res.status(401).json({ message: 'Mot de passe incorrect' });
    }

    // AUTHENTIFICATION R√âUSSIE
    // 1. On stocke l'utilisateur dans req.body pour une utilisation future
    // 2. Cela permet aux autres parties de l'application de savoir qui est connect√©
    req.body.user = user;

    // R√âPONSE AU CLIENT
    // 1. Status 200 = succ√®s en HTTP
    // 2. On renvoie un message de succ√®s et les donn√©es de l'utilisateur
    res.status(200).json({ message: 'Connexion r√©ussie', user });

  } catch (error) {
    // GESTION DES ERREURS
    // Si une erreur technique survient (ex: base de donn√©es inaccessible)
    // 1. On log l'erreur pour le debugging
    // 2. On renvoie une erreur 500 (erreur serveur) au client
    console.error("‚ùå Erreur serveur :", error);
    res.status(500).json({ message: 'Erreur serveur' });
  }
};

// üìù R√âSUM√â POUR L'√âPREUVE E6
// Ce contr√¥leur est crucial car il g√®re la s√©curit√© de l'application :
// 1. Authentification des utilisateurs
// 2. V√©rification des identifiants
// 3. Gestion des erreurs
// 4. Communication avec la base de donn√©es
//
// Points techniques √† souligner :
// - Utilisation de TypeScript pour la s√©curit√© du typage
// - Requ√™tes SQL param√©tr√©es contre les injections
// - Gestion asynchrone avec async/await
// - Codes HTTP standards (200, 401, 500)
