// ************************************************************************
// üéì MOD√àLE DES EPI - PROJET GESTEPI 
// Pour l'√©preuve E6 BTS SIO SLAM
// ************************************************************************

// üìö IMPORTS N√âCESSAIRES
// On importe l'objet db qui contient notre connexion √† MySQL
// Il nous permet d'ex√©cuter des requ√™tes SQL de fa√ßon s√©curis√©e
import { db } from '../config/database';

// üéØ CLASSE MOD√àLE
// Cette classe suit le pattern MVC (Mod√®le-Vue-Contr√¥leur)
// Elle g√®re toute la logique d'acc√®s aux donn√©es des EPI
export class EpiModel {

  // üì• M√âTHODE : R√âCUP√âRER TOUS LES EPI
  // async car les requ√™tes SQL sont asynchrones
  // Promise<any[]> = on renvoie un tableau d'objets
  async findAll() {
    // Ex√©cute un simple SELECT * et retourne tous les EPI
    const [rows] = await db.query('SELECT * FROM Epi');
    return rows;
  }

  // üì• M√âTHODE : R√âCUP√âRER UN EPI PAR SON ID
  // id: number = l'identifiant unique de l'EPI recherch√©
  // Promise<any|null> = renvoie soit l'EPI trouv√© soit null
  async findById(id: number) {
    // Requ√™te SQL avec WHERE et param√®tre s√©curis√© (?)
    const [rows] = await db.query('SELECT * FROM Epi WHERE id = ?', [id]);
    // Si on trouve au moins 1 r√©sultat on renvoie le premier, sinon null
    return Array.isArray(rows) && rows.length > 0 ? rows[0] : null;
  }

  // ‚ûï M√âTHODE : CR√âER UN NOUVEL EPI
  // data: any = objet contenant toutes les donn√©es du nouvel EPI
  // Promise<any> = renvoie l'EPI cr√©√© avec son ID
  async create(data: any) {
    try {
      // REQU√äTE SQL D'INSERTION
      // 1. Les champs de la table sont list√©s explicitement
      // 2. VALUES (?, ?, ...) = param√®tres s√©curis√©s contre les injections
      const query = `
        INSERT INTO Epi (
          identifiant_custom,
          marque,
          modele,
          num√©ro_s√©rie,
          taille,
          couleur,
          date_achat,
          date_fabrication,
          date_mise_en_service,
          p√©riodicit√©_controle,
          epi_type_id,
          statut_id
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
      `;

      // PR√âPARATION DES VALEURS
      // || null = si la valeur n'existe pas, on met null
      // Cela g√®re les champs optionnels
      const values = [
        data.identifiant_custom,
        data.marque,
        data.modele,
        data.num√©ro_s√©rie,
        data.taille || null,
        data.couleur || null,
        data.date_achat || null,
        data.date_fabrication || null,
        data.date_mise_en_service || null,
        data.p√©riodicit√©_controle,
        data.epi_type_id,
        data.statut_id
      ];

      // EX√âCUTION DE LA REQU√äTE
      // result.insertId = l'ID auto-incr√©ment√© g√©n√©r√© par MySQL
      const [result]: any = await db.query(query, values);
      return { id: result.insertId, ...data };

    } catch (error) {
      console.error("‚ùå Erreur lors de la cr√©ation de l'EPI:", error);
      throw error;
    }
  }

  // üîÑ M√âTHODE : METTRE √Ä JOUR UN EPI
  // id: number = l'identifiant de l'EPI √† modifier
  // data: any = nouvelles donn√©es √† enregistrer
  async update(id: number, data: any) {
    try {
      // Log pour debugging
      console.log("üì¶ Donn√©es re√ßues pour update SQL:", id, data);

      // REQU√äTE SQL DE MISE √Ä JOUR
      // SET field = ? : chaque champ est mis √† jour de fa√ßon s√©curis√©e
      // WHERE id = ? : on cible l'EPI par son ID
      const query = `
        UPDATE Epi SET
          identifiant_custom = ?,
          marque = ?,
          modele = ?,
          num√©ro_s√©rie = ?,
          taille = ?,
          couleur = ?,
          date_achat = ?,
          date_fabrication = ?,
          date_mise_en_service = ?,
          p√©riodicit√©_controle = ?,
          epi_type_id = ?,
          statut_id = ?
        WHERE id = ?
      `;

      // PR√âPARATION DES VALEURS
      // M√™me principe que create() pour les champs optionnels
      const values = [
        data.identifiant_custom,
        data.marque,
        data.modele,
        data.num√©ro_s√©rie,
        data.taille || null,
        data.couleur || null,
        data.date_achat || null,
        data.date_fabrication || null,
        data.date_mise_en_service || null,
        data.p√©riodicit√©_controle,
        data.epi_type_id,
        data.statut_id,
        id
      ];

      // Logs pour debugging
      console.log('üì¶ Requ√™te SQL ex√©cut√©e :', query);
      console.log('üì¶ Valeurs envoy√©es √† MySQL :', values);

      // EX√âCUTION DE LA MISE √Ä JOUR
      const [result]: any = await db.query(query, values);

      // Si aucune ligne modifi√©e = l'ID n'existe pas
      if (result.affectedRows === 0) return null;

      return { id, ...data };

    } catch (error) {
      console.error('‚ùå ERREUR SQL UPDATE EPI :', error);
      throw error;
    }
  }

  // ‚ùå M√âTHODE : SUPPRIMER UN EPI
  // id: number = l'identifiant de l'EPI √† supprimer
  // Promise<boolean> = true si supprim√©, false si non trouv√©
  async delete(id: number) {
    const [result]: any = await db.query('DELETE FROM Epi WHERE id = ?', [id]);
    return result.affectedRows > 0;
  }
}

// üìù R√âSUM√â POUR L'√âPREUVE E6
// Ce mod√®le est le c≈ìur de la gestion des EPI dans l'application.
// Points techniques √† souligner :
// 1. Pattern MVC avec s√©paration des responsabilit√©s
// 2. Requ√™tes SQL param√©tr√©es contre les injections
// 3. Gestion des erreurs et logging
// 4. CRUD complet (Create, Read, Update, Delete)
// 5. Gestion des champs optionnels avec || null
