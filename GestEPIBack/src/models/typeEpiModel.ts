// ************************************************************************
// üéì MOD√àLE DES TYPES D'EPI - PROJET GESTEPI 
// Pour l'√©preuve E6 BTS SIO SLAM
// ************************************************************************

// üìö IMPORTS N√âCESSAIRES
// On importe l'objet db qui contient notre connexion √† MySQL
// Il nous permet d'ex√©cuter des requ√™tes SQL de fa√ßon s√©curis√©e
import { db } from '../config/database';

// On importe l'interface TypeEPI qui d√©finit la structure d'un type d'EPI
// Cette interface est un "contrat" TypeScript qui garantit que nos objets
// type d'EPI auront toujours la bonne structure
import { TypeEPI } from '../types';

// üéØ CLASSE MOD√àLE
// Cette classe suit le pattern MVC (Mod√®le-Vue-Contr√¥leur)
// Elle g√®re toute la logique d'acc√®s aux donn√©es des types d'EPI
export class TypeEpiModel {

  // üì• M√âTHODE : R√âCUP√âRER TOUS LES TYPES D'EPI
  // async car les requ√™tes SQL sont asynchrones
  // Promise<TypeEPI[]> = on renvoie un tableau d'objets TypeEPI
  async findAll(): Promise<TypeEPI[]> {
    try {
      // REQU√äTE SQL SIMPLE
      // 1. SELECT * : s√©lectionne toutes les colonnes de Type_EPI
      // 2. Le [rows] utilise la d√©structuration d'un tableau
      const [rows] = await db.query('SELECT * FROM Type_EPI');
      
      // RETOUR DES DONN√âES
      // as TypeEPI[] = type casting TypeScript pour garantir le bon type
      return rows as TypeEPI[];
    } catch (error) {
      // GESTION DES ERREURS
      // On log l'erreur pour le debugging
      // throw error la transmet au contr√¥leur qui g√®rera la r√©ponse HTTP
      console.error('Erreur lors de la r√©cup√©ration des types d\'EPI:', error);
      throw error;
    }
  }

  // üì• M√âTHODE : R√âCUP√âRER UN TYPE D'EPI PAR SON ID
  // id: number = l'identifiant unique du type recherch√©
  // Promise<TypeEPI|null> = renvoie soit le type trouv√© soit null
  async findById(id: number): Promise<TypeEPI | null> {
    try {
      // REQU√äTE SQL AVEC PARAM√àTRE
      // 1. WHERE id = ? : filtre sur l'ID demand√©
      // 2. Le ? est remplac√© par l'id de fa√ßon s√©curis√©e (anti-injection SQL)
      const [rows] = await db.query('SELECT * FROM Type_EPI WHERE id = ?', [id]);
      
      // TRAITEMENT DU R√âSULTAT
      // 1. Cast en tableau de TypeEPI
      // 2. Si on trouve un r√©sultat on le renvoie, sinon null
      const types = rows as TypeEPI[];
      return types.length > 0 ? types[0] : null;
    } catch (error) {
      // Log d√©taill√© de l'erreur avec l'ID concern√©
      console.error(`Erreur lors de la r√©cup√©ration du type d'EPI ${id}:`, error);
      throw error;
    }
  }
}

// üìù R√âSUM√â POUR L'√âPREUVE E6
// Ce mod√®le est responsable de :
// 1. La r√©cup√©ration de tous les types d'EPI possibles
// 2. La recherche d'un type sp√©cifique par son ID
// 3. La gestion des erreurs de base de donn√©es
//
// Points techniques √† souligner :
// - Pattern MVC
// - Programmation asynchrone avec async/await
// - Requ√™tes SQL s√©curis√©es
// - Gestion d'erreurs try/catch
// - Typage fort avec TypeScript