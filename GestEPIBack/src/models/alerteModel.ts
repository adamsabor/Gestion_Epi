// ************************************************************************
// üéì MOD√àLE DES ALERTES - PROJET GESTEPI 
// Pour l'√©preuve E6 BTS SIO SLAM
// ************************************************************************

// üìö IMPORTS N√âCESSAIRES
// On importe l'objet db qui contient notre connexion √† MySQL
// Il nous permet d'ex√©cuter des requ√™tes SQL de fa√ßon s√©curis√©e
import { db } from '../config/database';

// On importe des fonctions utilitaires de date-fns pour manipuler les dates :
// - addMonths : ajoute X mois √† une date
// - format : convertit une date en cha√Æne (ex: "2024-01-25") 
// - parseISO : convertit une cha√Æne en objet Date
import { addMonths, format, parseISO } from 'date-fns';

// üéØ CLASSE MOD√àLE
// Cette classe g√®re toute la logique m√©tier des alertes de contr√¥le des EPI
// Elle suit le pattern MVC en s√©parant l'acc√®s aux donn√©es de la logique m√©tier
export class AlerteModel {

  // üì• M√âTHODE PRINCIPALE : R√âCUP√âRATION DES ALERTES
  // async car on fait des requ√™tes SQL qui sont asynchrones
  // statut? est un param√®tre optionnel (le ? le rend facultatif)
  // Promise<any[]> indique qu'on renvoie un tableau d'objets
  async getAlertes(statut?: string): Promise<any[]> {
    try {
      // On r√©cup√®re la date du jour au format YYYY-MM-DD
      // Cette date servira de r√©f√©rence pour calculer les d√©lais
      const today = format(new Date(), 'yyyy-MM-dd');
      
      // REQU√äTE SQL COMPLEXE
      // 1. SELECT e.* : s√©lectionne toutes les colonnes de la table EPI
      // 2. JOIN avec Type_EPI : r√©cup√®re le nom du type d'EPI
      // 3. LEFT JOIN avec Controle_EPI : r√©cup√®re le dernier contr√¥le
      // 4. GROUP BY : regroupe les r√©sultats par EPI
      const [epis] = await db.query(`
        SELECT e.*, 
               t.nom as type_nom,
               MAX(c.date_controle) as dernier_controle,
               e.p√©riodicit√©_controle
        FROM EPI e
        JOIN Type_EPI t ON e.epi_type_id = t.id
        LEFT JOIN Controle_EPI c ON e.id = c.epi_id
        GROUP BY e.id
      `);
      
      // TRAITEMENT DES DONN√âES
      // Pour chaque EPI, on calcule son statut d'alerte
      // map() transforme chaque EPI en y ajoutant des informations
      const alertes = (epis as any[]).map((epi: any) => {
        // On d√©termine la date de r√©f√©rence pour les calculs
        // Soit le dernier contr√¥le, soit la mise en service
        let dernierControle;
        
        try {
          // GESTION DES DATES
          // On v√©rifie dans l'ordre :
          // 1. Date du dernier contr√¥le
          // 2. Date de mise en service
          // 3. Date du jour en dernier recours
          if (epi.dernier_controle && typeof epi.dernier_controle === 'string') {
            dernierControle = parseISO(epi.dernier_controle);
          } else if (epi.date_mise_en_service && typeof epi.date_mise_en_service === 'string') {
            dernierControle = parseISO(epi.date_mise_en_service);
          } else {
            dernierControle = new Date();
          }
        } catch (error) {
          // En cas d'erreur de format de date
          console.error('Erreur lors du parsing de la date:', error);
          dernierControle = new Date();
        }
        
        // CALCUL DU PROCHAIN CONTR√îLE
        // On ajoute la p√©riodicit√© (en mois) √† la date de r√©f√©rence
        // Par d√©faut : 12 mois si non sp√©cifi√©
        const prochainControle = addMonths(dernierControle, epi.p√©riodicit√©_controle || 12);
        const prochainControleStr = format(prochainControle, 'yyyy-MM-dd');
        
        // D√âTERMINATION DU STATUT
        // On compare les dates pour d√©finir l'urgence :
        // - En retard : date d√©pass√©e
        // - √Ä venir : dans moins d'un mois
        // - √Ä jour : RAS
        let statutEpi = '√Ä jour';
        let urgence = 'normale';
        
        if (prochainControleStr < today) {
          statutEpi = 'En retard';
          urgence = 'haute';
        } else {
          const unMoisAvant = format(addMonths(prochainControle, -1), 'yyyy-MM-dd');
          if (today >= unMoisAvant) {
            statutEpi = '√Ä venir';
            urgence = 'moyenne';
          }
        }
        
        // On retourne l'objet EPI enrichi avec les nouvelles infos
        return {
          ...epi, // spread operator : copie toutes les propri√©t√©s existantes
          dernier_controle: epi.dernier_controle || epi.date_mise_en_service,
          prochain_controle: prochainControleStr,
          statut: statutEpi,
          urgence
        };
      });
      
      // FILTRAGE FINAL
      // Si un statut est demand√©, on filtre les r√©sultats
      // Sinon on renvoie tout
      return statut 
        ? alertes.filter((alerte: any) => alerte.statut === statut)
        : alertes;
        
    } catch (error) {
      // GESTION DES ERREURS
      // On log l'erreur et on la propage
      console.error('Erreur lors de la r√©cup√©ration des alertes:', error);
      throw error;
    }
  }
}

// üìù R√âSUM√â POUR L'√âPREUVE E6
// Ce mod√®le est crucial car il g√®re la s√©curit√© des EPI en :
// 1. Surveillant les dates de contr√¥le
// 2. Calculant les d√©lais et urgences
// 3. Alertant sur les retards
//
// Points techniques √† souligner :
// - Architecture MVC
// - Requ√™tes SQL complexes (JOIN, GROUP BY)
// - Gestion des dates avec date-fns
// - Programmation orient√©e objet avec TypeScript
// - Gestion des erreurs