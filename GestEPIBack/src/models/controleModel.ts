// ************************************************************************
// üéì MOD√àLE DES CONTR√îLES D'EPI - PROJET GESTEPI 
// Pour l'√©preuve E6 BTS SIO SLAM
// ************************************************************************

// üìö IMPORTS N√âCESSAIRES
// On importe l'objet db qui contient notre connexion √† MySQL
// Il nous permet d'ex√©cuter des requ√™tes SQL de fa√ßon s√©curis√©e
import { db } from '../config/database';

// On importe l'interface Controle qui d√©finit la structure d'un contr√¥le
// Cette interface est un "contrat" TypeScript qui garantit que nos objets
// contr√¥le auront toujours la bonne structure
import { Controle } from '../types';

// üéØ CLASSE MOD√àLE
// Cette classe suit le pattern MVC (Mod√®le-Vue-Contr√¥leur)
// Elle g√®re toute la logique d'acc√®s aux donn√©es des contr√¥les d'EPI
export class ControleModel {

  // üì• M√âTHODE : R√âCUP√âRER TOUS LES CONTR√îLES
  // async car les requ√™tes SQL sont asynchrones
  // Promise<Controle[]> = on renvoie un tableau d'objets Controle
  async findAll(): Promise<Controle[]> {
    try {
      // REQU√äTE SQL AVEC JOINTURES
      // 1. SELECT c.* : s√©lectionne toutes les colonnes de Controle_EPI
      // 2. JOIN avec EPI : r√©cup√®re les infos de l'√©quipement contr√¥l√©
      // 3. JOIN avec Utilisateur : r√©cup√®re le nom du gestionnaire
      // 4. JOIN avec Statut_EPI : r√©cup√®re le libell√© du statut
      // 5. ORDER BY : trie par date d√©croissante (plus r√©cent d'abord)
      const [rows] = await db.query(`
        SELECT c.*, e.identifiant_custom, e.marque, e.modele, u.nom as gestionnaire_nom, s.nom as statut_nom
        FROM Controle_EPI c
        JOIN EPI e ON c.epi_id = e.id
        JOIN Utilisateur u ON c.gestionnaire_id = u.id
        JOIN Statut_EPI s ON c.statut_id = s.id
        ORDER BY c.date_controle DESC
      `);
      return rows as Controle[];
    } catch (error) {
      // GESTION DES ERREURS
      // On log l'erreur pour le debugging
      // throw error la transmet au contr√¥leur qui g√®rera la r√©ponse HTTP
      console.error('Erreur lors de la r√©cup√©ration des contr√¥les:', error);
      throw error;
    }
  }

  // üì• M√âTHODE : R√âCUP√âRER LES CONTR√îLES D'UN EPI
  // epiId: number = identifiant de l'EPI dont on veut l'historique
  async findByEpiId(epiId: number): Promise<Controle[]> {
    try {
      // REQU√äTE SQL FILTR√âE
      // M√™me structure que findAll() mais avec WHERE c.epi_id = ?
      // Le ? est un param√®tre qui prot√®ge contre les injections SQL
      const [rows] = await db.query(`
        SELECT c.*, u.nom as gestionnaire_nom, s.nom as statut_nom
        FROM Controle_EPI c
        JOIN Utilisateur u ON c.gestionnaire_id = u.id
        JOIN Statut_EPI s ON c.statut_id = s.id
        WHERE c.epi_id = ?
        ORDER BY c.date_controle DESC
      `, [epiId]);
      return rows as Controle[];
    } catch (error) {
      console.error(`Erreur lors de la r√©cup√©ration des contr√¥les pour l'EPI ${epiId}:`, error);
      throw error;
    }
  }

  // üì• M√âTHODE : R√âCUP√âRER UN CONTR√îLE SP√âCIFIQUE
  // id: number = identifiant du contr√¥le recherch√©
  // Promise<Controle | null> = renvoie soit un contr√¥le, soit null si non trouv√©
  async findById(id: number): Promise<Controle | null> {
    try {
      // REQU√äTE SQL AVEC CONDITION UNIQUE
      // WHERE c.id = ? cherche un contr√¥le pr√©cis
      const [rows] = await db.query(`
        SELECT c.*, u.nom as gestionnaire_nom, s.nom as statut_nom
        FROM Controle_EPI c
        JOIN Utilisateur u ON c.gestionnaire_id = u.id
        JOIN Statut_EPI s ON c.statut_id = s.id
        WHERE c.id = ?
      `, [id]);
      // Si on trouve un r√©sultat on le renvoie, sinon null
      const controles = rows as Controle[];
      return controles.length > 0 ? controles[0] : null;
    } catch (error) {
      console.error(`Erreur lors de la r√©cup√©ration du contr√¥le avec l'ID ${id}:`, error);
      throw error;
    }
  }

  // üì§ M√âTHODE : CR√âER UN NOUVEAU CONTR√îLE
  // controle: Controle = donn√©es du nouveau contr√¥le √† cr√©er
  async create(controle: Controle): Promise<Controle> {
    try {
      // REQU√äTE SQL D'INSERTION
      // 1. INSERT INTO avec les colonnes concern√©es
      // 2. VALUES (?, ?, ?, ?, ?) pour les param√®tres s√©curis√©s
      // 3. Les valeurs sont pass√©es dans un tableau
      const [result] = await db.query(
        'INSERT INTO Controle_EPI (date_controle, gestionnaire_id, epi_id, statut_id, remarques) VALUES (?, ?, ?, ?, ?)',
        [
          controle.date_controle,
          controle.gestionnaire_id,
          controle.epi_id,
          controle.statut_id,
          controle.remarques || null // Gestion des remarques optionnelles
        ]
      );
      
      // On r√©cup√®re l'ID auto-incr√©ment√© g√©n√©r√© par MySQL
      const insertId = (result as any).insertId;
      // On renvoie l'objet complet avec son nouvel ID
      return { ...controle, id: insertId };
    } catch (error) {
      console.error('Erreur lors de la cr√©ation du contr√¥le:', error);
      throw error;
    }
  }
}

// üìù R√âSUM√â POUR L'√âPREUVE E6
// Ce mod√®le est crucial car il g√®re tout l'historique des contr√¥les des EPI :
// 1. Architecture MVC avec s√©paration des responsabilit√©s
// 2. Requ√™tes SQL s√©curis√©es avec param√®tres
// 3. Gestion des erreurs avec try/catch
// 4. Typage strict avec TypeScript
// 5. Jointures SQL pour r√©cup√©rer les donn√©es li√©es