// ************************************************************************
// üéì COMPOSANT REACT LAYOUT - PROJET GESTEPI 
// Pour l'√©preuve E6 BTS SIO SLAM
// ************************************************************************

// üìö IMPORTS N√âCESSAIRES
// ReactNode est un type TypeScript qui repr√©sente n'importe quel √©l√©ment React valide
// On l'utilise pour typer les "children" qui peuvent √™tre du texte, des composants, etc.
import { ReactNode } from 'react';

// Material-UI fournit des composants graphiques pr√™ts √† l'emploi
// Box : Conteneur flexible (comme une div am√©lior√©e)
// AppBar : Barre de navigation en haut de l'application
// Drawer : Menu lat√©ral coulissant
// List/ListItem : Pour cr√©er des listes structur√©es
import { 
  Box, AppBar, Toolbar, Typography, 
  Drawer, List, ListItemButton, 
  ListItemIcon, ListItemText 
} from '@mui/material';

// useNavigate est un hook de React Router pour la navigation
// Il permet de changer de page sans recharger l'application
import { useNavigate } from 'react-router-dom';

// Ic√¥nes Material-UI pour le menu
import InventoryIcon from '@mui/icons-material/Inventory';
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import DashboardIcon from '@mui/icons-material/Dashboard';

// ********** CONSTANTES **********
// Largeur fixe du menu lat√©ral en pixels
const drawerWidth = 240;

// ********** INTERFACE TYPESCRIPT **********
// Pour l'E6 : Cette interface d√©finit la structure des props du composant
// children est de type ReactNode et contiendra le contenu des pages
interface LayoutProps {
  children: ReactNode;
}

// ********** COMPOSANT REACT **********
// Layout est un composant qui enveloppe toutes les pages de l'application
// Il fournit la structure commune : barre du haut + menu lat√©ral + zone de contenu
const Layout = ({ children }: LayoutProps) => {
  // Hook useNavigate pour la navigation
  // Exemple : navigate('/epis') redirige vers la page des EPIs
  const navigate = useNavigate();

  // Configuration du menu principal
  // Chaque √©l√©ment a un texte, une ic√¥ne et un chemin de destination
  const menuItems = [
    { text: 'Tableau de bord', icon: <DashboardIcon />, path: '/' },
    { text: 'EPIs', icon: <InventoryIcon />, path: '/epis' },
    { text: 'Contr√¥les', icon: <CheckCircleIcon />, path: '/controls' },
  ];

  // ********** RENDU JSX **********
  return (
    // Box principal avec flexbox pour le layout
    // display: 'flex' permet d'avoir le menu √† gauche et le contenu √† droite
    <Box sx={{ display: 'flex' }}>
      {/* AppBar : Barre de navigation sup√©rieure fixe */}
      {/* zIndex √©lev√© pour rester au-dessus des autres √©l√©ments */}
      <AppBar position="fixed" sx={{ zIndex: (theme) => theme.zIndex.drawer + 1 }}>
        <Toolbar>
          <Typography variant="h6" noWrap component="div">
            GestEPI
          </Typography>
        </Toolbar>
      </AppBar>

      {/* Drawer : Menu lat√©ral permanent */}
      {/* variant="permanent" signifie qu'il est toujours visible */}
      <Drawer
        variant="permanent"
        sx={{
          width: drawerWidth,
          flexShrink: 0,
          '& .MuiDrawer-paper': {
            width: drawerWidth,
            boxSizing: 'border-box',
          },
        }}
      >
        {/* Espace pour compenser la hauteur de l'AppBar */}
        <Toolbar />
        
        {/* Liste des √©l√©ments du menu */}
        <List>
          {/* Map sur menuItems pour g√©n√©rer les boutons du menu */}
          {/* Chaque clic d√©clenche une navigation via navigate() */}
          {menuItems.map((item) => (
            <ListItemButton key={item.text} onClick={() => navigate(item.path)}>
              <ListItemIcon>{item.icon}</ListItemIcon>
              <ListItemText primary={item.text} />
            </ListItemButton>
          ))}
        </List>
      </Drawer>

      {/* Zone principale de contenu */}
      {/* flexGrow: 1 fait grandir cette zone pour occuper l'espace disponible */}
      <Box component="main" sx={{ flexGrow: 1, p: 3 }}>
        <Toolbar /> {/* Espace pour l'AppBar */}
        {children} {/* Affichage du contenu de la page active */}
      </Box>
    </Box>
  );
};

// Export du composant pour l'utiliser dans App.tsx
export default Layout;

// üìù R√âSUM√â POUR L'√âPREUVE E6
// Ce fichier est crucial car il :
// 1. D√©finit la structure visuelle commune √† toute l'application
// 2. G√®re la navigation principale via React Router
// 3. Utilise Material-UI pour un design professionnel
// 4. Impl√©mente un layout responsive avec flexbox
// 5. Utilise TypeScript pour le typage des props
//
// Points techniques √† souligner :
// - Architecture React moderne (hooks, composants fonctionnels)
// - Typage TypeScript
// - Utilisation de Material-UI
// - Navigation avec React Router
// - Structure de code maintenable et r√©utilisable