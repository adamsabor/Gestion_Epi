// ************************************************************************
// üéì COMPOSANT REACT DATATABLE - PROJET GESTEPI 
// Pour l'√©preuve E6 BTS SIO SLAM
// ************************************************************************

// üìö IMPORTS N√âCESSAIRES
// React est la biblioth√®que de base pour cr√©er des composants
// C'est la premi√®re chose √† importer dans un fichier React
import React from 'react';

// Material-UI DataGrid : une biblioth√®que de tableaux avanc√©s
// - DataGrid : Le composant principal qui cr√©e le tableau
// - GridColDef : Interface TypeScript qui d√©finit la structure d'une colonne
// - GridPaginationModel : Interface pour g√©rer la pagination (nb lignes par page, page actuelle)
import { DataGrid, GridColDef, GridPaginationModel } from '@mui/x-data-grid';

// ********** INTERFACE TYPESCRIPT **********
// Pour l'E6 : Cette interface d√©finit les props que notre composant peut recevoir
// C'est comme un contrat qui garantit que le composant re√ßoit les bonnes donn√©es
export interface DataTableProps {
  rows: any[];                    // Les donn√©es √† afficher dans le tableau
  columns: GridColDef[];          // D√©finition des colonnes (nom, type, largeur...)
  rowsPerPageOptions?: number[];  // Options pour le nombre de lignes par page
  checkboxSelection?: boolean;    // Active/d√©sactive les cases √† cocher
  disableSelectionOnClick?: boolean; // Emp√™che la s√©lection au clic
  pageSize?: number;              // Nombre de lignes par page par d√©faut
}

// ********** COMPOSANT REACT **********
// Pour l'E6 : Un composant fonctionnel (FC) qui cr√©e un tableau r√©utilisable
// Il utilise les generics (<DataTableProps>) pour le typage des props
const DataTable: React.FC<DataTableProps> = ({
  rows,
  columns,
  rowsPerPageOptions = [5, 10, 25],    // Valeurs par d√©faut
  checkboxSelection = false,
  disableSelectionOnClick = false,
  pageSize = 10
}) => {
  // ********** HOOK USESTATE **********
  // Pour l'E6 : useState est un hook React qui g√®re l'√©tat local du composant
  // Ici, il g√®re la pagination (quelle page on affiche, combien de lignes)
  const [paginationModel, setPaginationModel] = React.useState<GridPaginationModel>({
    pageSize: pageSize,  // Nombre de lignes par page
    page: 0,            // On commence √† la page 0
  });

  // ********** RENDU JSX **********
  // Pour l'E6 : Le JSX est comme du HTML am√©lior√© qui peut inclure du JavaScript
  return (
    // Conteneur avec hauteur fixe pour le tableau
    <div style={{ height: 400, width: '100%' }}>
      {/* DataGrid de Material-UI avec toutes ses props configur√©es */}
      <DataGrid
        rows={rows}                   // Donn√©es √† afficher
        columns={columns}             // Structure des colonnes
        paginationModel={paginationModel}        // √âtat de la pagination
        onPaginationModelChange={setPaginationModel}  // Mise √† jour pagination
        pageSizeOptions={rowsPerPageOptions}     // Options nb lignes/page
        checkboxSelection={checkboxSelection}     // Cases √† cocher
        disableRowSelectionOnClick={disableSelectionOnClick}  // D√©sactive s√©lection
      />
    </div>
  );
};

// Export du composant pour l'utiliser dans d'autres fichiers
export default DataTable;

// üìù R√âSUM√â POUR L'√âPREUVE E6
// Ce fichier est important car il :
// 1. Cr√©e un composant r√©utilisable pour afficher des donn√©es en tableau
// 2. Utilise TypeScript pour garantir la s√©curit√© du code
// 3. Int√®gre Material-UI pour une interface professionnelle
// 4. G√®re la pagination et les interactions utilisateur
//
// Points techniques √† souligner :
// - Composant React moderne (Function Component)
// - Typage strict avec TypeScript
// - Props avec valeurs par d√©faut
// - Hook useState pour la gestion d'√©tat
// - Int√©gration d'une biblioth√®que externe (Material-UI)