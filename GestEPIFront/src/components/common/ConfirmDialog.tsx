// ************************************************************************
// üéì COMPOSANT REACT CONFIRMDIALOG - PROJET GESTEPI 
// Pour l'√©preuve E6 BTS SIO SLAM
// ************************************************************************

// üìö IMPORTS N√âCESSAIRES
// React est la biblioth√®que de base pour cr√©er des composants
// C'est la premi√®re chose √† importer dans un fichier React
import React from 'react';

// Material-UI fournit des composants graphiques pr√™ts √† l'emploi
// Dialog : Une fen√™tre modale qui s'affiche par-dessus l'application
// DialogActions : Conteneur pour les boutons d'action
// DialogContent : Zone principale du contenu
// DialogContentText : Le texte du message
// DialogTitle : La barre de titre en haut
// Button : Les boutons d'action (Confirmer/Annuler)
import { 
  Button,
  Dialog,
  DialogActions, 
  DialogContent,
  DialogContentText,
  DialogTitle
} from '@mui/material';

// ********** INTERFACE TYPESCRIPT **********
// Pour l'E6 : TypeScript permet de d√©finir pr√©cis√©ment la structure des props
// C'est comme un contrat qui garantit que le composant re√ßoit les bonnes donn√©es
interface ConfirmDialogProps {
  open: boolean;      // true = dialogue visible, false = cach√©
  title: string;      // Titre affich√© en haut du dialogue
  content: string;    // Message de confirmation
  onConfirm: () => void;  // Fonction ex√©cut√©e si l'utilisateur confirme
  onCancel: () => void;   // Fonction ex√©cut√©e si l'utilisateur annule
}

// ********** COMPOSANT REACT **********
// FC = Function Component (composant fonctionnel)
// Les props sont d√©structur√©es directement dans les param√®tres
const ConfirmDialog: React.FC<ConfirmDialogProps> = ({ 
  open, 
  title, 
  content, 
  onConfirm, 
  onCancel 
}) => {
  // Le composant retourne du JSX (m√©lange de HTML et JavaScript)
  return (
    // Dialog est le conteneur principal
    // open={open} contr√¥le la visibilit√©
    // onClose est appel√© quand l'utilisateur ferme la fen√™tre
    <Dialog
      open={open}
      onClose={onCancel}
      // aria-* sont des attributs pour l'accessibilit√©
      // Ils aident les lecteurs d'√©cran √† comprendre la structure
      aria-labelledby="confirm-dialog-title"
      aria-describedby="confirm-dialog-description"
    >
      {/* DialogTitle affiche le titre pass√© en prop */}
      <DialogTitle id="confirm-dialog-title">
        {title}
      </DialogTitle>

      {/* DialogContent contient le message principal */}
      <DialogContent>
        <DialogContentText id="confirm-dialog-description">
          {content}
        </DialogContentText>
      </DialogContent>

      {/* DialogActions contient les boutons align√©s √† droite */}
      <DialogActions>
        {/* Bouton Annuler : appelle onCancel quand cliqu√© */}
        <Button onClick={onCancel} color="primary">
          Annuler
        </Button>
        {/* Bouton Confirmer : appelle onConfirm quand cliqu√© */}
        {/* variant="contained" donne un style rempli au bouton */}
        {/* autoFocus fait que ce bouton a le focus par d√©faut */}
        <Button onClick={onConfirm} color="error" variant="contained" autoFocus>
          Confirmer
        </Button>
      </DialogActions>
    </Dialog>
  );
};

// Export du composant pour l'utiliser ailleurs
export default ConfirmDialog;

// üìù R√âSUM√â POUR L'√âPREUVE E6
// Ce fichier est crucial car il :
// 1. Cr√©e un composant r√©utilisable pour les confirmations
// 2. Utilise TypeScript pour la s√©curit√© du code
// 3. Impl√©mente une interface utilisateur professionnelle
// 4. Suit les bonnes pratiques d'accessibilit√©
//
// Points techniques √† souligner :
// - Architecture React moderne (composant fonctionnel)
// - Typage strict avec TypeScript
// - Utilisation de Material-UI
// - Props et √©v√©nements React