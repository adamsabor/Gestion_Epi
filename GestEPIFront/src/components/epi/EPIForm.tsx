// ************************************************************************
// üéì COMPOSANT REACT EPIFORM - PROJET GESTEPI 
// Pour l'√©preuve E6 BTS SIO SLAM
// ************************************************************************

// üìö IMPORTS N√âCESSAIRES
// React et ses hooks pour g√©rer l'√©tat et les effets
import React, { useEffect, useState } from 'react';
// axios pour faire des requ√™tes HTTP vers l'API
import axios from 'axios';

// Composants Material-UI pour l'interface graphique
import {
  Box,          // Conteneur flexible
  TextField,    // Champs de saisie
  MenuItem,     // Option de menu d√©roulant
  Select,       // Menu d√©roulant
  InputLabel,   // Label pour les champs
  FormControl,  // Conteneur de formulaire
  Button,       // Bouton
  Alert,        // Message d'alerte
  Typography,   // Texte styl√©
  SelectChangeEvent, // Type pour les √©v√©nements de select
} from '@mui/material';

// Hooks de React Router pour la navigation et les param√®tres d'URL
import { useNavigate, useParams } from 'react-router-dom';
// Service qui g√®re les appels API pour les EPIs
import { epiService } from '../../services/epiService';

// ********** INTERFACE TYPESCRIPT **********
// Pour l'E6 : Cette interface d√©finit la structure exacte d'un EPI
// C'est comme une classe qui garantit que toutes les propri√©t√©s sont pr√©sentes
interface EPIFormData {
  id: number;                    // Cl√© primaire en BDD
  identifiant_custom: string;    // Identifiant unique de l'EPI
  marque: string;               // Marque du fabricant
  mod√®le: string;               // Mod√®le de l'√©quipement
  num√©ro_s√©rie: string;         // Num√©ro de s√©rie unique
  taille: string;               // Taille de l'√©quipement
  couleur: string;              // Couleur de l'EPI
  date_achat: string;           // Date d'achat (YYYY-MM-DD)
  date_fabrication: string;     // Date de fabrication
  date_mise_en_service: string; // Date de premi√®re utilisation
  p√©riodicit√©_controle: number; // Intervalle entre les contr√¥les (mois)
  epi_type_id: number;          // Cl√© √©trang√®re vers types_epi
  statut_id: number;            // Cl√© √©trang√®re vers statuts
}

// ********** FONCTION UTILITAIRE **********
// Pour l'E6 : Formate une date en YYYY-MM-DD pour les champs date
const formatDate = (value: string) => {
  if (!value) return '';
  const date = new Date(value);
  return date.toISOString().split('T')[0];
};

// ********** COMPOSANT REACT **********
// Pour l'E6 : Composant qui g√®re le formulaire de cr√©ation/modification d'EPI
const EPIForm: React.FC = () => {
  // Hook pour la navigation programmatique
  const navigate = useNavigate();
  // R√©cup√®re l'ID dans l'URL si on est en mode √©dition
  const { id } = useParams();
  // D√©termine si on est en cr√©ation ou modification
  const isEdit = Boolean(id);

  // ********** √âTATS (VARIABLES R√âACTIVES) **********
  // Pour l'E6 : useState cr√©e des variables qui, quand modifi√©es, 
  // d√©clenchent une mise √† jour de l'interface

  // √âtat principal : donn√©es du formulaire
  // En SQL : SELECT * FROM epis WHERE id = ?
  const [formData, setFormData] = useState<EPIFormData>({
    id: 0,
    identifiant_custom: '',
    marque: '',
    mod√®le: '',
    num√©ro_s√©rie: '',
    taille: '',
    couleur: '',
    date_achat: '',
    date_fabrication: '',
    date_mise_en_service: '',
    p√©riodicit√©_controle: 0,
    epi_type_id: 0,
    statut_id: 0,
  });

  // √âtat pour les messages d'erreur
  const [error, setError] = useState<string | null>(null);

  // √âtats pour les listes d√©roulantes
  // En SQL : SELECT * FROM gestionnaires; SELECT * FROM statuts;
  const [gestionnaires, setGestionnaires] = useState<any[]>([]);
  const [statuts, setStatuts] = useState<any[]>([]);
  const [loadingOptions, setLoadingOptions] = useState(true);

  // ********** EFFETS (ACTIONS AUTOMATIQUES) **********
  // Pour l'E6 : useEffect ex√©cute du code quand certaines valeurs changent

  // Effet 1 : Charge les listes d√©roulantes au d√©marrage
  useEffect(() => {
    const fetchOptions = async () => {
      try {
        // Appels API parall√®les avec Promise.all
        const [resGestionnaires, resStatuts] = await Promise.all([
          axios.get('http://localhost:3001/api/gestionnaires'),
          axios.get('http://localhost:3001/api/statuts'),
        ]);
        setGestionnaires(resGestionnaires.data);
        setStatuts(resStatuts.data);
      } catch (error) {
        console.error("Erreur lors du chargement des options :", error);
      } finally {
        setLoadingOptions(false);
      }
    };
    fetchOptions();
  }, []); // [] = ex√©cution unique au montage

  // Effet 2 : Charge les donn√©es de l'EPI en mode √©dition
  // En SQL : SELECT * FROM epis WHERE id = ?
  useEffect(() => {
    if (isEdit && id) {
      epiService.getById(Number(id))
        .then((epi: any) => {
          setFormData({
            id: epi.id ?? 0,
            identifiant_custom: epi.identifiant_custom ?? '',
            marque: epi.marque ?? '',
            mod√®le: epi.mod√®le ?? '',
            num√©ro_s√©rie: epi.num√©ro_s√©rie ?? '',
            taille: epi.taille ?? '',
            couleur: epi.couleur ?? '',
            date_achat: formatDate(epi.date_achat),
            date_fabrication: formatDate(epi.date_fabrication),
            date_mise_en_service: formatDate(epi.date_mise_en_service),
            p√©riodicit√©_controle: epi.p√©riodicit√©_controle ?? 0,
            epi_type_id: epi.epi_type_id ?? 0,
            statut_id: epi.statut_id ?? 0,
          });
        })
        .catch(() => setError("Erreur lors du chargement de l'EPI."));
    }
  }, [id, isEdit]); // Se relance si id ou isEdit change

  // ********** GESTIONNAIRES D'√âV√âNEMENTS **********
  // Pour l'E6 : Fonctions appel√©es quand l'utilisateur interagit

  // G√®re les changements dans les champs texte
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: name === 'p√©riodicit√©_controle' ? Number(value) : value
    }));
  };

  // G√®re les changements dans les menus d√©roulants
  const handleSelectChange = (e: SelectChangeEvent<any>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: Number(value)
    }));
  };

  // G√®re la soumission du formulaire
  // En SQL : INSERT INTO epis (...) VALUES (...) 
  // ou UPDATE epis SET ... WHERE id = ?
  const handleSubmit = async () => {
    try {
      if (isEdit && id) {
        await epiService.update(Number(id), formData);
      } else {
        await epiService.create(formData);
      }
      navigate('/epis'); // Retour √† la liste apr√®s succ√®s
    } catch (err: any) {
      console.error(err);
      setError(err?.response?.data?.message || "Erreur lors de l'enregistrement de l'EPI.");
    }
  };

  // ********** RENDU CONDITIONNEL **********
  if (loadingOptions) {
    return <p>Chargement des donn√©es...</p>;
  }

  // ********** RENDU DU FORMULAIRE **********
  // Pour l'E6 : Structure JSX qui d√©finit l'interface utilisateur
  return (
    <Box maxWidth="sm" mx="auto" mt={4} display="flex" flexDirection="column" gap={2}>
      <Typography variant="h5">{isEdit ? 'Modifier un EPI' : 'Ajouter un EPI'}</Typography>

      {error && <Alert severity="error">{error}</Alert>}

      {/* Champs de saisie pour chaque propri√©t√© de l'EPI */}
      <TextField label="Identifiant" name="identifiant_custom" value={formData.identifiant_custom} onChange={handleChange} fullWidth />
      <TextField label="Marque" name="marque" value={formData.marque} onChange={handleChange} fullWidth />
      <TextField label="Mod√®le" name="mod√®le" value={formData.mod√®le} onChange={handleChange} fullWidth />
      <TextField label="N¬∞ de s√©rie" name="num√©ro_s√©rie" value={formData.num√©ro_s√©rie} onChange={handleChange} fullWidth />
      <TextField label="Taille" name="taille" value={formData.taille} onChange={handleChange} fullWidth />
      <TextField label="Couleur" name="couleur" value={formData.couleur} onChange={handleChange} fullWidth />
      <TextField label="Date d'achat" name="date_achat" type="date" value={formData.date_achat} onChange={handleChange} InputLabelProps={{ shrink: true }} fullWidth />
      <TextField label="Date de fabrication" name="date_fabrication" type="date" value={formData.date_fabrication} onChange={handleChange} InputLabelProps={{ shrink: true }} fullWidth />
      <TextField label="Date de mise en service" name="date_mise_en_service" type="date" value={formData.date_mise_en_service} onChange={handleChange} InputLabelProps={{ shrink: true }} fullWidth />
      <TextField label="P√©riodicit√© de contr√¥le (mois)" name="p√©riodicit√©_controle" type="number" value={formData.p√©riodicit√©_controle} onChange={handleChange} fullWidth />

      {/* Menus d√©roulants pour les relations */}
      <FormControl fullWidth>
        <InputLabel id="epi-type-label">Type d'EPI</InputLabel>
        <Select labelId="epi-type-label" name="epi_type_id" value={formData.epi_type_id || ""} onChange={handleSelectChange} displayEmpty>
          <MenuItem value="">S√©lectionner</MenuItem>
          <MenuItem value={1}>Casque</MenuItem>
          <MenuItem value={2}>Harnais</MenuItem>
          <MenuItem value={3}>Corde</MenuItem>
          <MenuItem value={4}>Gants</MenuItem>
        </Select>
      </FormControl>

      <FormControl fullWidth>
        <InputLabel id="statut-label">Statut</InputLabel>
        <Select labelId="statut-label" name="statut_id" value={formData.statut_id || ""} onChange={handleSelectChange} displayEmpty>
          <MenuItem value="">S√©lectionner</MenuItem>
          <MenuItem value={1}>En service</MenuItem>
          <MenuItem value={2}>Hors service</MenuItem>
          <MenuItem value={3}>En contr√¥le</MenuItem>
        </Select>
      </FormControl>

      <Button variant="contained" color="primary" onClick={handleSubmit}>
        {isEdit ? 'Mettre √† jour' : 'Cr√©er'}
      </Button>
    </Box>
  );
};

export default EPIForm;

// üìù R√âSUM√â POUR L'√âPREUVE E6
// Ce fichier est crucial car il :
// 1. G√®re la cr√©ation et modification des EPIs (CRUD)
// 2. Utilise les hooks React (useState, useEffect) pour la r√©activit√©
// 3. Communique avec l'API via axios et epiService
// 4. Utilise TypeScript pour la s√©curit√© du code
// 5. Int√®gre Material-UI pour une interface professionnelle
// 6. G√®re les erreurs et la validation des donn√©es
