// ************************************************************************
// üéì SERVICE API - PROJET GESTEPI 
// Pour l'√©preuve E6 BTS SIO SLAM
// ************************************************************************

// üìö IMPORTS N√âCESSAIRES
// axios : biblioth√®que pour faire des requ√™tes HTTP
// Pour l'E6 : √âquivalent de file_get_contents() ou cURL en PHP
// AxiosInstance : type qui d√©finit la configuration d'axios
// AxiosResponse : type qui d√©finit le format des r√©ponses
import axios, { AxiosInstance, AxiosResponse } from 'axios';

// ********** CONFIGURATION AXIOS **********
// Pour l'E6 : On configure une instance axios r√©utilisable
// Comme une connexion PDO en PHP avec des param√®tres par d√©faut
const instance = axios.create({
  // URL de base de l'API (comme define('API_URL', '...') en PHP)
  baseURL: 'http://localhost:3001/api',
  // En-t√™tes par d√©faut (comme header() en PHP)
  headers: { 'Content-Type': 'application/json' },
});

// ********** INTERCEPTEUR DE REQU√äTES **********
// Pour l'E6 : Intercepte chaque requ√™te avant envoi
// Comme un middleware en PHP qui s'ex√©cute avant chaque route
instance.interceptors.request.use(
  (config) => {
    // Log de debug (comme error_log() en PHP)
    console.log(`üì° Requ√™te envoy√©e vers ${config.baseURL}${config.url}`);
    return config;
  },
  // Gestion des erreurs (comme try/catch en PHP)
  (error) => Promise.reject(error)
);

// ********** INTERCEPTEUR DE R√âPONSES **********
// Pour l'E6 : Intercepte chaque r√©ponse de l'API
// Comme un middleware qui traite la r√©ponse avant de la renvoyer
instance.interceptors.response.use(
  // Si succ√®s, renvoie la r√©ponse telle quelle
  (response) => response,
  // Si erreur, log d√©taill√© pour debug
  (error) => {
    if (error.response) {
      // Erreur avec r√©ponse (ex: 404, 500...)
      // Pour l'E6 : Comme une erreur SQL avec un message
      console.error(
        `‚ùå Erreur API (${error.config.url}) : ${error.response.status} - ${error.response.data?.message || error.message}`
      );
    } 
    else if (error.request) {
      // Pas de r√©ponse (serveur injoignable)
      // Pour l'E6 : Comme une erreur de connexion √† la BDD
      console.error(`‚ùå Aucune r√©ponse de l'API pour : ${error.config?.url}`);
    } 
    else {
      // Autre erreur
      console.error(`‚ùå Erreur lors de la requ√™te API : ${error.message}`);
    }
    return Promise.reject(error);
  }
);

// ********** M√âTHODES API **********
// Pour l'E6 : Objet qui regroupe toutes les m√©thodes HTTP
// Comme une classe de service en PHP avec des m√©thodes CRUD
export const api = {
  // GET : R√©cup√©rer des donn√©es
  // Pour l'E6 : √âquivalent SQL = SELECT
  get: async <T>(url: string): Promise<AxiosResponse<T>> => {
    return instance.get<T>(url);
  },
  
  // POST : Cr√©er des donn√©es
  // Pour l'E6 : √âquivalent SQL = INSERT
  post: async <T>(url: string, data: any): Promise<AxiosResponse<T>> => {
    return instance.post<T>(url, data);
  },
  
  // PUT : Modifier des donn√©es
  // Pour l'E6 : √âquivalent SQL = UPDATE
  put: async <T>(url: string, data: any): Promise<AxiosResponse<T>> => {
    return instance.put<T>(url, data);
  },
  
  // DELETE : Supprimer des donn√©es
  // Pour l'E6 : √âquivalent SQL = DELETE
  delete: async <T>(url: string): Promise<AxiosResponse<T>> => {
    return instance.delete<T>(url);
  },
};

// Export de l'instance pour usage direct si n√©cessaire
export default instance;

// üìù R√âSUM√â POUR L'√âPREUVE E6
// Ce fichier est important car il :
// 1. Configure la communication avec l'API backend
// 2. G√®re les erreurs de mani√®re centralis√©e
// 3. Fournit des m√©thodes CRUD r√©utilisables
// 4. Utilise TypeScript pour la s√©curit√© du typage
// 5. Log les requ√™tes pour faciliter le debug
