// ************************************************************************
// üéì SERVICE TYPE EPI - PROJET GESTEPI 
// Pour l'√©preuve E6 BTS SIO SLAM
// ************************************************************************

// üìö IMPORTS N√âCESSAIRES
// api : instance axios configur√©e pour notre backend
// Pour l'E6 : √âquivalent des requ√™tes AJAX en JS vanilla ou fetch
import { api } from './api';

// Type TypeEPI : d√©finit la structure d'un type d'√©quipement
// Pour l'E6 : Comme une classe PHP qui d√©finirait les propri√©t√©s obligatoires
import { TypeEPI } from '../types';

// ********** INTERFACE TYPESCRIPT **********
// Pour l'E6 : D√©finit le format de r√©ponse de l'API
// √âquivalent en PHP : class ApiResponse { public string $message; public $data; }
// Le T est un "g√©n√©rique" - il s'adapte au type de donn√©es retourn√©
interface ApiResponse<T> {
  message: string;  // Message de l'API (succ√®s/erreur)
  data: T;         // Donn√©es retourn√©es (type variable)
}

// ********** SERVICE TYPE EPI **********
// Pour l'E6 : Objet qui regroupe toutes les fonctions li√©es aux types d'EPI
// En PHP : ce serait une classe de service avec des m√©thodes statiques
export const typeEpiService = {
  // Fonction qui r√©cup√®re tous les types d'EPI
  // Pour l'E6 : √âquivalent SQL = SELECT * FROM type_epis
  // async/await : gestion asynchrone comme les Promises en JS
  getAll: async (): Promise<TypeEPI[]> => {
    try {
      // Appel API GET vers /epi-types
      // Pour l'E6 : Comme un fetch() en JS ou file_get_contents() en PHP
      const response = await api.get<ApiResponse<TypeEPI[]>>('/epi-types');
      // Retourne les donn√©es ou tableau vide si null
      return response.data.data || [];
    } catch (error) {
      // Gestion des erreurs (comme try/catch en PHP)
      console.error('Erreur lors de la r√©cup√©ration des types d\'EPI:', error);
      return [];
    }
  },

  // Fonction qui r√©cup√®re un type d'EPI par son ID
  // Pour l'E6 : √âquivalent SQL = SELECT * FROM type_epis WHERE id = ? LIMIT 1
  // id : identifiant unique du type d'EPI recherch√©
  getById: async (id: number): Promise<TypeEPI | null> => {
    try {
      // Appel API avec l'ID dans l'URL
      // Pour l'E6 : L'URL est construite dynamiquement avec l'ID
      const response = await api.get<ApiResponse<TypeEPI>>(`/epi-types/${id}`);
      return response.data.data;
    } catch (error) {
      console.error(`Erreur lors de la r√©cup√©ration du type d'EPI avec l'ID ${id}:`, error);
      return null;
    }
  }
};

// üìù R√âSUM√â POUR L'√âPREUVE E6
// Ce fichier est important car il :
// 1. G√®re toutes les interactions avec l'API concernant les types d'EPI
// 2. Utilise TypeScript pour la s√©curit√© du typage
// 3. Impl√©mente la gestion d'erreurs
// 4. Permet de r√©cup√©rer la liste des types ou un type sp√©cifique
// 5. Suit le pattern Service pour une meilleure organisation du code