// ************************************************************************
// üéì SERVICE ALERTE - PROJET GESTEPI 
// Pour l'√©preuve E6 BTS SIO SLAM
// ************************************************************************

// üìö IMPORTS N√âCESSAIRES
// api : instance axios configur√©e pour notre backend
// Pour l'E6 : √âquivalent des requ√™tes AJAX en JS vanilla ou fetch
import { api } from './api';

// Type Alerte : d√©finit la structure d'une alerte
// Pour l'E6 : Comme une classe PHP qui d√©finirait les propri√©t√©s obligatoires
import { Alerte } from '../types';

// ********** INTERFACE TYPESCRIPT **********
// Pour l'E6 : D√©finit le format de r√©ponse de l'API
// √âquivalent en PHP : class ApiResponse { public string $message; public $data; }
// Le T est un "g√©n√©rique" - il s'adapte au type de donn√©es retourn√©
interface ApiResponse<T> {
  message: string;  // Message de l'API (succ√®s/erreur)
  data: T;         // Donn√©es retourn√©es (type variable)
}

// ********** SERVICE ALERTE **********
// Pour l'E6 : Objet qui regroupe toutes les fonctions li√©es aux alertes
// En PHP : ce serait une classe de service avec des m√©thodes statiques
export const alerteService = {
  // Fonction qui r√©cup√®re toutes les alertes
  // Pour l'E6 : √âquivalent en SQL = SELECT * FROM alertes
  // async/await : gestion asynchrone comme les Promises en JS
  getAll: async (): Promise<Alerte[]> => {
    try {
      // Appel API GET vers /alertes
      // Pour l'E6 : Comme un fetch() en JS ou file_get_contents() en PHP
      const response = await api.get<ApiResponse<Alerte[]>>('/alertes');
      
      // Retourne uniquement le tableau d'alertes
      // Pour l'E6 : √âquivalent d'un return json_decode($response)->data;
      return response.data.data;
    } catch (error) {
      // Gestion des erreurs (comme try/catch en PHP)
      console.error('Erreur lors de la r√©cup√©ration des alertes:', error);
      throw error;
    }
  },

  // Fonction qui filtre les alertes par statut
  // Pour l'E6 : √âquivalent SQL = SELECT * FROM alertes WHERE statut = ?
  // statut : param√®tre qui d√©finit le filtre ("En retard", "√Ä venir"...)
  getByStatut: async (statut: string): Promise<Alerte[]> => {
    try {
      // Appel API avec le statut dans l'URL
      // Pour l'E6 : L'URL est construite dynamiquement avec le statut
      const response = await api.get<ApiResponse<Alerte[]>>(`/alertes/statut/${statut}`);
      
      // Retourne les alertes filtr√©es
      return response.data.data;
    } catch (error) {
      // Log d√©taill√© avec le statut probl√©matique
      console.error(`Erreur lors de la r√©cup√©ration des alertes avec le statut ${statut}:`, error);
      throw error;
    }
  },
};

// üìù R√âSUM√â POUR L'√âPREUVE E6
// Ce fichier est important car il :
// 1. G√®re toutes les interactions avec l'API concernant les alertes
// 2. Utilise TypeScript pour la s√©curit√© du typage
// 3. Impl√©mente la gestion d'erreurs
// 4. Permet de filtrer les alertes par statut
// 5. Suit le pattern Service pour une meilleure organisation du code