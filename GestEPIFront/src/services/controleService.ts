// ************************************************************************
// üéì SERVICE CONTROLE - PROJET GESTEPI 
// Pour l'√©preuve E6 BTS SIO SLAM
// ************************************************************************

// üìö IMPORTS N√âCESSAIRES
// api : instance axios configur√©e pour notre backend
// Pour l'E6 : √âquivalent des requ√™tes AJAX en JS vanilla ou fetch
import { api } from './api';

// Type Controle : d√©finit la structure d'un contr√¥le
// Pour l'E6 : Comme une classe PHP qui d√©finirait les propri√©t√©s obligatoires
import { Controle } from '../types';

// ********** INTERFACE TYPESCRIPT **********
// Pour l'E6 : D√©finit le format de r√©ponse de l'API
// √âquivalent en PHP : class ApiResponse { public string $message; public $data; }
// Le T est un "g√©n√©rique" - il s'adapte au type de donn√©es retourn√©
interface ApiResponse<T> {
  message: string;  // Message de l'API (succ√®s/erreur)
  data: T;         // Donn√©es retourn√©es (type variable)
}

// ********** SERVICE CONTROLE **********
// Pour l'E6 : Objet qui regroupe toutes les fonctions li√©es aux contr√¥les
// En PHP : ce serait une classe de service avec des m√©thodes statiques
export const controleService = {
  // Fonction qui r√©cup√®re tous les contr√¥les
  // Pour l'E6 : √âquivalent SQL = SELECT * FROM controles
  // async/await : gestion asynchrone comme les Promises en JS
  getAll: async (): Promise<Controle[]> => {
    try {
      // Appel API GET vers /controles
      // Pour l'E6 : Comme un fetch() en JS ou file_get_contents() en PHP
      const response = await api.get<ApiResponse<Controle[]>>('/controles');
      // Retourne les donn√©es ou tableau vide si null
      return response.data.data || [];
    } catch (error) {
      // Gestion des erreurs (comme try/catch en PHP)
      console.error('Erreur lors de la r√©cup√©ration des contr√¥les:', error);
      throw error;
    }
  },

  // Fonction qui r√©cup√®re les contr√¥les d'un EPI sp√©cifique
  // Pour l'E6 : √âquivalent SQL = SELECT * FROM controles WHERE epi_id = ?
  // epiId : identifiant de l'EPI dont on veut l'historique
  getByEpiId: async (epiId: number): Promise<Controle[]> => {
    try {
      // Appel API avec l'ID dans l'URL
      // Pour l'E6 : L'URL est construite dynamiquement avec l'ID
      const response = await api.get<ApiResponse<Controle[]>>(`/epi/${epiId}`);
      return response.data.data || [];
    } catch (error) {
      console.error(`Erreur lors de la r√©cup√©ration des contr√¥les pour l'EPI ${epiId}:`, error);
      throw error;
    }
  },

  // Fonction qui r√©cup√®re un contr√¥le par son ID
  // Pour l'E6 : √âquivalent SQL = SELECT * FROM controles WHERE id = ? LIMIT 1
  // id : identifiant unique du contr√¥le recherch√©
  getById: async (id: number): Promise<Controle> => {
    try {
      // Appel API avec l'ID du contr√¥le
      const response = await api.get<ApiResponse<Controle>>(`/controles/${id}`);
      return response.data.data;
    } catch (error) {
      console.error(`Erreur lors de la r√©cup√©ration du contr√¥le avec l'ID ${id}:`, error);
      throw error;
    }
  },

  // Fonction qui cr√©e un nouveau contr√¥le
  // Pour l'E6 : √âquivalent SQL = INSERT INTO controles (champs...) VALUES (...)
  // controle : objet contenant toutes les donn√©es du nouveau contr√¥le
  create: async (controle: Controle): Promise<Controle> => {
    try {
      // Appel API POST avec les donn√©es du contr√¥le
      const response = await api.post<ApiResponse<Controle>>('/controles', controle);
      return response.data.data;
    } catch (error) {
      console.error('Erreur lors de la cr√©ation du contr√¥le:', error);
      throw error;
    }
  }
};

// üìù R√âSUM√â POUR L'√âPREUVE E6
// Ce fichier est important car il :
// 1. G√®re toutes les interactions avec l'API concernant les contr√¥les
// 2. Utilise TypeScript pour la s√©curit√© du typage
// 3. Impl√©mente les op√©rations CRUD (Create, Read)
// 4. G√®re les erreurs de mani√®re centralis√©e
// 5. Suit le pattern Service pour une meilleure organisation du code