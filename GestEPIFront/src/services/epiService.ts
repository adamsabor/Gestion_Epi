// ************************************************************************
// üéì SERVICE EPI - PROJET GESTEPI 
// Pour l'√©preuve E6 BTS SIO SLAM
// ************************************************************************

// üìö IMPORTS N√âCESSAIRES
// api : instance axios configur√©e pour notre backend
// Pour l'E6 : √âquivalent des requ√™tes AJAX en JS vanilla ou fetch
import { api } from './api';

// Type EPI : d√©finit la structure d'un √©quipement
// Pour l'E6 : Comme une classe PHP qui d√©finirait les propri√©t√©s obligatoires
import { EPI } from '../types';

// ********** INTERFACE TYPESCRIPT **********
// Pour l'E6 : D√©finit le format de r√©ponse de l'API
// √âquivalent en PHP : class ApiResponse { public string $message; public $data; }
// Le T est un "g√©n√©rique" - il s'adapte au type de donn√©es retourn√©
interface ApiResponse<T> {
  message: string;  // Message de l'API (succ√®s/erreur)
  data: T;         // Donn√©es retourn√©es (type variable)
}

// ********** SERVICE EPI **********
// Pour l'E6 : Objet qui regroupe toutes les fonctions li√©es aux EPI
// En PHP : ce serait une classe de service avec des m√©thodes statiques
export const epiService = {
  // Fonction qui r√©cup√®re tous les EPI
  // Pour l'E6 : √âquivalent SQL = SELECT * FROM epis
  // async/await : gestion asynchrone comme les Promises en JS
  getAll: async (): Promise<EPI[]> => {
    const response = await api.get<ApiResponse<EPI[]>>('/epis');
    return response.data.data;
  },

  // Fonction qui r√©cup√®re un EPI par son ID
  // Pour l'E6 : √âquivalent SQL = SELECT * FROM epis WHERE id = ? LIMIT 1
  // id : identifiant unique de l'EPI recherch√©
  getById: async (id: number): Promise<EPI> => {
    const response = await api.get<ApiResponse<EPI>>(`/epis/${id}`);
    return response.data.data;
  },

  // Fonction qui cr√©e un nouvel EPI
  // Pour l'E6 : √âquivalent SQL = INSERT INTO epis (champs...) VALUES (...)
  // epi : objet contenant toutes les donn√©es du nouvel √©quipement
  create: async (epi: EPI): Promise<EPI> => {
    const response = await api.post<ApiResponse<EPI>>('/epis', epi);
    return response.data.data;
  },

  // Fonction qui modifie un EPI existant
  // Pour l'E6 : √âquivalent SQL = UPDATE epis SET champ1=val1, ... WHERE id = ?
  // Partial<EPI> : permet de ne mettre √† jour que certains champs
  update: async (id: number, epi: Partial<EPI>): Promise<EPI> => {
    const response = await api.put<ApiResponse<EPI>>(`/epis/${id}`, epi);
    return response.data.data;
  },

  // Fonction qui supprime un EPI
  // Pour l'E6 : √âquivalent SQL = DELETE FROM epis WHERE id = ?
  // void : la fonction ne retourne rien
  delete: async (id: number): Promise<void> => {
    await api.delete(`/epis/${id}`);
  }
};

// üìù R√âSUM√â POUR L'√âPREUVE E6
// Ce fichier est important car il :
// 1. G√®re toutes les interactions avec l'API concernant les EPI
// 2. Impl√©mente les op√©rations CRUD (Create, Read, Update, Delete)
// 3. Utilise TypeScript pour la s√©curit√© du typage
// 4. Suit le pattern Service pour une meilleure organisation du code
// 5. G√®re les appels asynchrones avec async/await
